<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ACEfish-Blog]]></title>
  <link href="https://acefish.github.io/atom.xml" rel="self"/>
  <link href="https://acefish.github.io/"/>
  <updated>2019-09-11T14:06:21+08:00</updated>
  <id>https://acefish.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.coderforart.com/">CoderForArt</generator>

  
  <entry>
    <title type="html"><![CDATA[AFSecurityPolicy]]></title>
    <link href="https://acefish.github.io/15680194937623.html"/>
    <updated>2019-09-09T16:58:13+08:00</updated>
    <id>https://acefish.github.io/15680194937623.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">AFSSLPinningMode</h2>

<pre><code class="language-objectivec">typedef NS_ENUM(NSUInteger, AFSSLPinningMode) {
    AFSSLPinningModeNone,
    AFSSLPinningModePublicKey,
    AFSSLPinningModeCertificate,
};
</code></pre>

<p>设置了3中验证服务器是否受信任的方式</p>

<ul>
<li>AFSSLPinningModeNone： 默认的认证方式，只会在系统的信任证书列表中对服务器返回的证书进行验证</li>
<li>AFSSLPinningModePublicKey：需要客户端预先保存服务器的证书</li>
<li>AFSSLPinningModeCertificate： 需要客户端事先保存服务器端发送的证书，但是只会验证证书中的公钥是否正确</li>
</ul>

<h2 id="toc_1">AFSecurityPolicy初始化</h2>

<pre><code class="language-objectivec">+ (instancetype)policyWithPinningMode:(AFSSLPinningMode)pinningMode withPinnedCertificates:(NSSet *)pinnedCertificates {
    AFSecurityPolicy *securityPolicy = [[self alloc] init];
    securityPolicy.SSLPinningMode = pinningMode;

    [securityPolicy setPinnedCertificates:pinnedCertificates];

    return securityPolicy;
}


- (void)setPinnedCertificates:(NSSet *)pinnedCertificates {
    _pinnedCertificates = pinnedCertificates;

    if (self.pinnedCertificates) {
        NSMutableSet *mutablePinnedPublicKeys = [NSMutableSet setWithCapacity:[self.pinnedCertificates count]];
        for (NSData *certificate in self.pinnedCertificates) {
            id publicKey = AFPublicKeyForCertificate(certificate);
            if (!publicKey) {
                continue;
            }
            [mutablePinnedPublicKeys addObject:publicKey];
        }
        self.pinnedPublicKeys = [NSSet setWithSet:mutablePinnedPublicKeys];
    } else {
        self.pinnedPublicKeys = nil;
    }
}

</code></pre>

<p>初始化Policy<br/>
在调用<code>PinnedCertificates</code>的setter方法时，调用了<code>AFPublicKeyForCertificate</code>C函数，对证书进行操作获取公钥，取出全部的公钥保存到<code>pinnedPublicKeys</code>属性中</p>

<h2 id="toc_2">操作 SecTrustRef</h2>

<p>对<code>SecTrustRef</code>的操作都是C的API，定义在<code>Security</code>模块中</p>

<pre><code class="language-objectivec">static id AFPublicKeyForCertificate(NSData *certificate) {
    //初始化临时变量
    id allowedPublicKey = nil;
    SecCertificateRef allowedCertificate;
    SecPolicyRef policy = nil;
    SecTrustRef allowedTrust = nil;
    SecTrustResultType result;
    //通过`DER`表示的数据生成一个`secCertificateRef`
    allowedCertificate = SecCertificateCreateWithData(NULL, (__bridge CFDataRef)certificate);
    //判断返回值是否为空
    __Require_Quiet(allowedCertificate != NULL, _out);

    //创建一个默认的符合 X509 标准的 SecPolicyRef
    policy = SecPolicyCreateBasicX509();
    //通过默认的SecPolicyRef和证书创建一个SecTrustRef用于信任评估，对该对象进行信任评估，确认生成的 SecTrustRef 是值得信任的
    __Require_noErr_Quiet(SecTrustCreateWithCertificates(allowedCertificate, policy, &amp;allowedTrust), _out);
    //确认生成的对象是值得信任的
    __Require_noErr_Quiet(SecTrustEvaluate(allowedTrust, &amp;result), _out);
    //获取公钥
    allowedPublicKey = (__bridge_transfer id)SecTrustCopyPublicKey(allowedTrust);

_out:
    //释放指针
    if (allowedTrust) {
        CFRelease(allowedTrust);
    }

    if (policy) {
        CFRelease(policy);
    }

    if (allowedCertificate) {
        CFRelease(allowedCertificate);
    }

    return allowedPublicKey;
}
</code></pre>

<blockquote>
<p>注意</p>

<p>每个SecTrustRef对象都包含多个<code>SecCertificateRef</code>和<code>SecPolicyRef</code>。其中<code>SecCertificateRef</code>可以使用DER进行表示，并且其中存储着公钥信息</p>
</blockquote>

<p>除此之外 还有操作还有<code>AFCertificateTrustChainForServerTrust</code>和<code>AFPublicKeyTrustChainForServerTrust</code>函数<br/>
但是调用了几乎相同的API</p>

<ul>
<li><code>SecTrustGetCertificateAtIndex</code> 获取SecTrustRef中的证书</li>
<li><p><code>SecCertificateCopyData</code> 从证书或者DER中表示的数据</p>
<pre><code class="language-objectivec">static NSArray * AFCertificateTrustChainForServerTrust(SecTrustRef serverTrust) {
    CFIndex certificateCount = SecTrustGetCertificateCount(serverTrust);<br/>
    NSMutableArray *trustChain = [NSMutableArray arrayWithCapacity:(NSUInteger)certificateCount];<br/>
    for (CFIndex i = 0; i &lt; certificateCount; i++) {<br/>
        SecCertificateRef certificate = SecTrustGetCertificateAtIndex(serverTrust, i);<br/>
        [trustChain addObject:(__bridge_transfer NSData *)SecCertificateCopyData(certificate)];<br/>
    }<br/>
    return [NSArray arrayWithArray:trustChain];<br/>
}<br/>
static NSArray * AFPublicKeyTrustChainForServerTrust(SecTrustRef serverTrust) {<br/>
    SecPolicyRef policy = SecPolicyCreateBasicX509();<br/>
    CFIndex certificateCount = SecTrustGetCertificateCount(serverTrust);<br/>
    NSMutableArray *trustChain = [NSMutableArray arrayWithCapacity:(NSUInteger)certificateCount];<br/>
    for (CFIndex i = 0; i &lt; certificateCount; i++) {<br/>
        SecCertificateRef certificate = SecTrustGetCertificateAtIndex(serverTrust, i);<br/>
        SecCertificateRef someCertificates[] = {certificate};<br/>
        CFArrayRef certificates = CFArrayCreate(NULL, (const void **)someCertificates, 1, NULL);<br/>
        SecTrustRef trust;<br/>
        __Require_noErr_Quiet(SecTrustCreateWithCertificates(certificates, policy, &amp;trust), _out);<br/>
        SecTrustResultType result;<br/>
        __Require_noErr_Quiet(SecTrustEvaluate(trust, &amp;result), _out);<br/>
        [trustChain addObject:(__bridge_transfer id)SecTrustCopyPublicKey(trust)];<br/>
    _out:<br/>
        if (trust) {<br/>
            CFRelease(trust);<br/>
        }<br/>
        if (certificates) {<br/>
            CFRelease(certificates);<br/>
        }<br/>
        continue;<br/>
    }<br/>
    CFRelease(policy);<br/>
    return [NSArray arrayWithArray:trustChain];<br/>
}
</code></pre></li>
</ul>

<h2 id="toc_3">验证服务端是否受信</h2>

<p>通过<code>[AFSecurityPolicy evaluateServerTrust:forDomain:]</code>来验证服务器端是否受信</p>

<pre><code class="language-objectivec">- (BOOL)evaluateServerTrust:(SecTrustRef)serverTrust
                  forDomain:(NSString *)domain {

    #1: 不能隐式的信任自己签发的证书
    #2: 设置policy
    #3: 验证证书是否有效
    #4: 根据SSLPinningMode对服务端进行验证
    
    return NO；
}
</code></pre>

<ol>
<li><p>不能隐式的信任自己签发的证书</p>
<pre><code class="language-objectivec">if (domain &amp;&amp; self.allowInvalidCertificates &amp;&amp; self.validatesDomainName &amp;&amp; (self.SSLPinningMode == AFSSLPinningModeNone || [self.pinnedCertificates count] == 0)) {
NSLog(@&quot;In order to validate a domain name for self signed certificates, you MUST use pinning.&quot;);<br/>
return NO;<br/>
}
</code></pre>
<p>因此如果没有提供证书或者不验证证书，并且还设置<code>allowInvalidCertificates</code>为真，满足上面所有条件 说明这次验证是不安全的  返回NO</p></li>
<li><p>设置Policy</p>
<pre><code class="language-objectivec">NSMutableArray *policies = [NSMutableArray array];
if (self.validatesDomainName) {<br/>
    [policies addObject:(__bridge_transfer id)SecPolicyCreateSSL(true, (__bridge CFStringRef)domain)];<br/>
} else {<br/>
    [policies addObject:(__bridge_transfer id)SecPolicyCreateBasicX509()];<br/>
}
</code></pre>
<p>如果要验证域名的话，就以域名为参数创建一个SecPolicyRef，否则会创建一个符合X509标注的默认<code>DecPlocyRef</code>对象</p></li>
<li><p>验证证书有效性</p>
<pre><code class="language-objectivec">if (self.SSLPinningMode == AFSSLPinningModeNone) {
    return self.allowInvalidCertificates || AFServerTrustIsValid(serverTrust);<br/>
} else if (!AFServerTrustIsValid(serverTrust) &amp;&amp; !self.allowInvalidCertificates) {<br/>
    return NO;<br/>
}
</code></pre>
<ul>
<li>如果只根据信任列表中证书进行验证，即<code>self.SSLPinningMode == AFSSLPinningModeNone</code>。如果允许无效的证书 就返回YES。不允许的话就对服务端进行验证</li>
<li>如果服务器信任无效，并且不允许无效证书，就返回NO</li>
</ul></li>
<li><p>根据<code>SSLPingMode</code>对服务器信任进行验证</p>
<pre><code class="language-objectivec">
</code></pre>
<ul>
<li><code>AFSSLPinningModeNone</code>直接返回NO</li>
<li><p><code>AFSSLPinningModeCertificate</code></p>
<pre><code class="language-objectivec">case AFSSLPinningModeCertificate: {
    NSMutableArray *pinnedCertificates = [NSMutableArray array];<br/>
    for (NSData *certificateData in self.pinnedCertificates) {<br/>
        [pinnedCertificates addObject:(__bridge_transfer id)SecCertificateCreateWithData(NULL, (__bridge CFDataRef)certificateData)];<br/>
    }<br/>
    SecTrustSetAnchorCertificates(serverTrust, (__bridge CFArrayRef)pinnedCertificates);<br/>
    if (!AFServerTrustIsValid(serverTrust)) {<br/>
        return NO;<br/>
    }<br/>
    // obtain the chain after being validated, which *should* contain the pinned certificate in the last position (if it&#39;s the Root CA)<br/>
    NSArray *serverCertificates = AFCertificateTrustChainForServerTrust(serverTrust);<br/>
    for (NSData *trustChainCertificate in [serverCertificates reverseObjectEnumerator]) {<br/>
        if ([self.pinnedCertificates containsObject:trustChainCertificate]) {<br/>
            return YES;<br/>
        }<br/>
    }<br/>
    return NO;<br/>
}
</code></pre>
<p>a. 从<code>self.pinnedCertificates</code>中获取DER表示的数据<br/>
b. 使用<code>SecTrustSetAnchorCertigicates</code>为服务器信任设置证书<br/>
c. 判断服务器信任的有效性<br/>
d. 使用<code>AFCertificateTrustChainForServerTrust</code>获取服务器信任中的全部DER表示的整数<br/>
e. 如果pinnedCertificated中有相同的整数，就会返回YES</p></li>
<li><p><code>AFSSLPinningModePublicKey</code></p>
<pre><code class="language-objectivec">case AFSSLPinningModePublicKey: {
    NSUInteger trustedPublicKeyCount = 0;<br/>
    NSArray *publicKeys = AFPublicKeyTrustChainForServerTrust(serverTrust);<br/>
    for (id trustChainPublicKey in publicKeys) {<br/>
        for (id pinnedPublicKey in self.pinnedPublicKeys) {<br/>
            if (AFSecKeyIsEqualToKey((__bridge SecKeyRef)trustChainPublicKey, (__bridge SecKeyRef)pinnedPublicKey)) {<br/>
                trustedPublicKeyCount += 1;<br/>
            }<br/>
        }<br/>
    }<br/>
    return trustedPublicKeyCount &gt; 0;<br/>
}
</code></pre>
<p>与<code>AFSSLPinningModeCertificate</code>的不同点在于:</p>
<ul>
<li>从服务器信任中获取公钥</li>
<li><code>pinnedPublicKeys</code>中的公钥与服务器信任中的公钥相同的属性大于0 返回真</li>
</ul></li>
</ul></li>
</ol>

<h2 id="toc_4">与 AFURLSessionManager 协作</h2>

<p>在<code>NSURLSessionDelegate</code>代理方法中 调用运行这段代码</p>

<pre><code class="language-objectivec"> - (void)URLSession:(NSURLSession *)session
didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge
 completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential *credential))completionHandler
{
    NSURLSessionAuthChallengeDisposition disposition = NSURLSessionAuthChallengePerformDefaultHandling;
    __block NSURLCredential *credential = nil;

    if (self.sessionDidReceiveAuthenticationChallenge) {
        disposition = self.sessionDidReceiveAuthenticationChallenge(session, challenge, &amp;credential);
    } else {
        if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]) {
            if ([self.securityPolicy evaluateServerTrust:challenge.protectionSpace.serverTrust forDomain:challenge.protectionSpace.host]) {
                credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust];
                if (credential) {
                    disposition = NSURLSessionAuthChallengeUseCredential;
                } else {
                    disposition = NSURLSessionAuthChallengePerformDefaultHandling;
                }
            } else {
                disposition = NSURLSessionAuthChallengeCancelAuthenticationChallenge;
            }
        } else {
            disposition = NSURLSessionAuthChallengePerformDefaultHandling;
        }
    }

    if (completionHandler) {
        completionHandler(disposition, credential);
    }
}
</code></pre>

<p><code>NSURLAuthenticationChallenge</code>表示一个认证的挑战，提供了关于这次认证的全部信息。<br/>
 其中的<code>protectionSpace</code>属性，保存了需要认证的保护空间，每个<code>NSURLProtectionSpace</code>对象都保存了主机地址、端口和认证方法等重要信息</p>

<p>如果保护空间的认证方法为<code>NSURLAuthenticationMethodServerTrust</code>，那么就会使用在上面提到的方法<code>- [AFSecurityPolicy evaluateServerTrust:forDomain:]</code> 对保护空间的<code>serverTrust</code>以及域名<code>host</code>进行认证</p>

<p>根据认证的结果，在<code>completionHandler</code>中传入不同的<code>disposition</code>和<code>credential</code>参数</p>

<h2 id="toc_5">小结</h2>

<p>AFSecurityPolicy 同样也作为一个即插即用的模块，在 AFNetworking 中作为验证 HTTPS 证书是否有效的模块存在    </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AFNetworkReachabilityManager]]></title>
    <link href="https://acefish.github.io/15680125238227.html"/>
    <updated>2019-09-09T15:02:03+08:00</updated>
    <id>https://acefish.github.io/15680125238227.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">AFNetworkReachabilityManager的使用</h2>

<h3 id="toc_1">初始化 AFNetworkReachabilityManager</h3>

<p>在初始化方法中使用<code>SCNetworkReachabilityCreateWithAddress</code>或者<code>SCNetworkReachabilityCreateWithName</code>生成一个<code>SCNetworkReachabilityRef</code>的引用</p>

<pre><code class="language-objectivec">+ (instancetype)managerForDomain:(NSString *)domain {
    SCNetworkReachabilityRef reachability = SCNetworkReachabilityCreateWithName(kCFAllocatorDefault, [domain UTF8String]);
    AFNetworkReachabilityManager *manager = [[self alloc] initWithReachability:reachability];
    CFRelease(reachability);
    return manager;
}

+ (instancetype)managerForAddress:(const void *)address {
    SCNetworkReachabilityRef reachability = SCNetworkReachabilityCreateWithAddress(kCFAllocatorDefault, (const struct sockaddr *)address);
    AFNetworkReachabilityManager *manager = [[self alloc] initWithReachability:reachability];
    CFRelease(reachability);
    return manager;
}

- (instancetype)initWithReachability:(SCNetworkReachabilityRef)reachability {
    self = [super init];
    if (!self) {
        return nil;
    }

    _networkReachability = CFRetain(reachability);
    self.networkReachabilityStatus = AFNetworkReachabilityStatusUnknown;

    return self;
}
</code></pre>

<ol>
<li>这两个方法通过 域名 或者有个 <code>sockaddr_in</code>指针 生成了一个<code>SCNetworkReachabilityRef</code></li>
<li>调用<code>- [AFNetworkReachabilityManager initWithReachability:]</code>将生成的<code>SCNetworkReachabilityRef</code>传入</li>
<li>设置默认<code>networkReachabilityStatus</code></li>
</ol>

<h3 id="toc_2">监控网络状态</h3>

<p>在初始化了manager之后，我们需要调用<code>startMonitoring</code>来开始监控网络状态</p>

<pre><code class="language-objectivec">- (void)startMonitoring {
    [self stopMonitoring];
    if (!self.networkReachability) {
        return;
    }
    __weak __typeof(self)weakSelf = self;
    AFNetworkReachabilityStatusBlock callback = ^(AFNetworkReachabilityStatus status) {
        __strong __typeof(weakSelf)strongSelf = weakSelf;

        strongSelf.networkReachabilityStatus = status;
        if (strongSelf.networkReachabilityStatusBlock) {
            strongSelf.networkReachabilityStatusBlock(status);
        }

    };

    SCNetworkReachabilityContext context = {0, (__bridge void *)callback, AFNetworkReachabilityRetainCallback, AFNetworkReachabilityReleaseCallback, NULL};
    SCNetworkReachabilitySetCallback(self.networkReachability, AFNetworkReachabilityCallback, &amp;context);
    SCNetworkReachabilityScheduleWithRunLoop(self.networkReachability, CFRunLoopGetMain(), kCFRunLoopCommonModes);

    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0),^{
        SCNetworkReachabilityFlags flags;
        if (SCNetworkReachabilityGetFlags(self.networkReachability, &amp;flags)) {
            AFPostReachabilityStatusChange(flags, callback);
        }
    });
}
</code></pre>

<p>在该方法中创建了每次网络状态改变时的回调<code>AFNetworkReachabilityStatusBlock</code>，当回调发生时，重新设置status属性，调用设置的<code>networkReachabilityStatusBlock</code>属性</p>

<p>监控网络状态核心代码</p>

<ol>
<li><p>创建一个<code>SCNetworkReachabilityContext</code></p>
<pre><code class="language-objectivec">typedef struct {
    CFIndex     version;<br/>
    void *      __nullable info;<br/>
    const void  * __nonnull (* __nullable retain)(const void *info);<br/>
    void        (* __nullable release)(const void *info);<br/>
    CFStringRef __nonnull (* __nullable copyDescription)(const void *info);<br/>
} SCNetworkReachabilityContext;<br/>
SCNetworkReachabilityContext context = {<br/>
 0,<br/>
 (__bridge void *)callback,<br/>
 AFNetworkReachabilityRetainCallback, <br/>
 AFNetworkReachabilityReleaseCallback, <br/>
 NULL<br/>
};
</code></pre></li>
<li><p>当目标状态改变时 调用传入的回调</p>
<pre><code class="language-objectivec">SCNetworkReachabilitySetCallback(self.networkReachability, AFNetworkReachabilityCallback, &amp;context);
static void AFNetworkReachabilityCallback(SCNetworkReachabilityRef __unused target, SCNetworkReachabilityFlags flags, void *info) {<br/>
    AFPostReachabilityStatusChange(flags, (__bridge AFNetworkReachabilityStatusBlock)info);<br/>
}<br/>
static void AFPostReachabilityStatusChange(SCNetworkReachabilityFlags flags, AFNetworkReachabilityStatusBlock block) {<br/>
    AFNetworkReachabilityStatus status = AFNetworkReachabilityStatusForFlags(flags);<br/>
    dispatch_async(dispatch_get_main_queue(), ^{<br/>
        if (block) {<br/>
            block(status);<br/>
        }<br/>
        NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];<br/>
        NSDictionary *userInfo = @{ AFNetworkingReachabilityNotificationStatusItem: @(status) };<br/>
        [notificationCenter postNotificationName:AFNetworkingReachabilityDidChangeNotification object:nil userInfo:userInfo];<br/>
    });<br/>
}
</code></pre>
<ol>
<li>当网络状态改变时 会将<code>context</code>作为参数 回调<code>AFNetworkReachabilityCallback</code></li>
<li>在<code>AFNetworkReachabilityCallback</code>中，将context中的block，以及作为状态的flags作为参数调用了 <code>AFPostReachabilityStatusChange</code>状态改变方法</li>
<li>利用<code>AFNetworkReachabilityStatusForFlags</code>函数将flags转变为网络状态status</li>
<li>在主线程中执行<code>block(status)</code> 并发送状态改变的通知</li>
</ol></li>
<li><p>在MainRunLoop中监控网络状态</p>
<pre><code class="language-objectivec">SCNetworkReachabilityScheduleWithRunLoop(self.networkReachability, CFRunLoopGetMain(), kCFRunLoopCommonModes);
</code></pre></li>
<li><p>获取当前网络状态 调用callback</p>
<pre><code class="language-objectivec"> dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0),^{
    SCNetworkReachabilityFlags flags;<br/>
    if (SCNetworkReachabilityGetFlags(self.networkReachability, &amp;flags)) {<br/>
        AFPostReachabilityStatusChange(flags, callback);<br/>
    }<br/>
});
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AFURLSerialization]]></title>
    <link href="https://acefish.github.io/15677400518331.html"/>
    <updated>2019-09-06T11:20:51+08:00</updated>
    <id>https://acefish.github.io/15677400518331.html</id>
    <content type="html"><![CDATA[
<p>在对请求和接收响应的过程中有两个序列化的模块:</p>

<ul>
<li>AFURLRequestSerialization</li>
<li>AFURLResponseSerialization</li>
</ul>

<p><code>AFURLRequestSerialization</code>主要用于修改请求(主要是HTTP请求)的头部，提供了一些语义明确的接口设置HTTP头部字段</p>

<p><code>AFURLResponseSerialization</code>将请求返回的数据解析为对应的格式</p>

<h2 id="toc_0">AFURLResponseSerialization</h2>

<p><code>AFURLResponseSerialization</code>其实只是一个协议</p>

<pre><code class="language-objectivec">@protocol AFURLResponseSerialization &lt;NSObject, NSSecureCoding, NSCopying&gt;
- (nullable id)responseObjectForResponse:(nullable NSURLResponse *)response
                           data:(nullable NSData *)data
                          error:(NSError * _Nullable __autoreleasing *)error NS_SWIFT_NOTHROW;

@end
</code></pre>

<p>当遵循了这个协议类的同时也要遵循NSObject、NSSecureCoding、NSCopying，用以实现安全编码、拷贝等OC对象的基本行为</p>

<p>该模块中的父类为<code>AFHTTPResponseSerializer</code>并且继承了<code>AFURLResponseSerialization</code>，其子类有<code>AFJSONResponseSerializer</code>、<code>AFXMLDocumentResponseSerializer</code>、<code>AFPropertyListResponseSerializer</code>等</p>

<h3 id="toc_1">AFHTTPResponseSerializer</h3>

<p>这是该模块中的父类 也是最重要的类</p>

<pre><code class="language-objectivec">- (instancetype)init {
    self = [super init];
    if (!self) {
        return nil;
    }
    self.acceptableStatusCodes = [NSIndexSet indexSetWithIndexesInRange:NSMakeRange(200, 100)];
    self.acceptableContentTypes = nil;
    return self;
}
</code></pre>

<p>初始化 设置<code>acceptableStatusCodes</code>接受的状态码为<code>200-299</code>只有在这个范围内 才表示获取了有效响应</p>

<h4 id="toc_2">验证有效性</h4>

<p>在<code>AFHTTPResponseSerializer</code> 最重要的方法就是<code>- [AFHTTPResponseSerializer validateResponse:data:error:]</code></p>

<pre><code class="language-objectivec">- (BOOL)validateResponse:(NSHTTPURLResponse *)response
                    data:(NSData *)data
                   error:(NSError * __autoreleasing *)error
{
    BOOL responseIsValid = YES;
    NSError *validationError = nil;

    if (response &amp;&amp; [response isKindOfClass:[NSHTTPURLResponse class]]) {
        if (self.acceptableContentTypes &amp;&amp; ![self.acceptableContentTypes containsObject:[response MIMEType]] &amp;&amp;
            !([response MIMEType] == nil &amp;&amp; [data length] == 0)) {
            ...
            //返回的类型 contentType无效
            responseIsValid = NO;
        }

        if (self.acceptableStatusCodes &amp;&amp; ![self.acceptableStatusCodes containsIndex:(NSUInteger)response.statusCode] &amp;&amp; [response URL]) {
                    ...
                    //返回的状态码无效
                    responseIsValid = NO;
        }
    }

    if (error &amp;&amp; !responseIsValid) {
        *error = validationError;
    }

    return responseIsValid;
}
</code></pre>

<p>这个方法中根据 <code>acceptableContentTypes</code>和<code>acceptab;leStatusCodes</code>来判断当前响应是否有效</p>

<p>通过<code>AFErrorWithUnderlyingError</code>生成格式化的错误</p>

<pre><code class="language-objectivec">if ([data length] &gt; 0 &amp;&amp; [response URL]) {
                NSMutableDictionary *mutableUserInfo = [@{
                                                          NSLocalizedDescriptionKey: [NSString stringWithFormat:NSLocalizedStringFromTable(@&quot;Request failed: unacceptable content-type: %@&quot;, @&quot;AFNetworking&quot;, nil), [response MIMEType]],
                                                          NSURLErrorFailingURLErrorKey:[response URL],
                                                          AFNetworkingOperationFailingURLResponseErrorKey: response,
                                                        } mutableCopy];
                if (data) {
                    mutableUserInfo[AFNetworkingOperationFailingURLResponseDataErrorKey] = data;
                }

                validationError = AFErrorWithUnderlyingError([NSError errorWithDomain:AFURLResponseSerializationErrorDomain code:NSURLErrorCannotDecodeContentData userInfo:mutableUserInfo], validationError);
            }
</code></pre>

<h4 id="toc_3">协议实现</h4>

<p>对于协议只是简单的调用了上面的对返回数据做了验证</p>

<pre><code class="language-objectivec">- (id)responseObjectForResponse:(NSURLResponse *)response
                           data:(NSData *)data
                          error:(NSError *__autoreleasing *)error
{
    [self validateResponse:(NSHTTPURLResponse *)response data:data error:error];

    return data;
}
</code></pre>

<h3 id="toc_4">AFJSONResponseSerializer</h3>

<p><code>AFJSONResponseSerializer</code>继承自<code>AFHTTPResponseSerializer</code> </p>

<h4 id="toc_5">初始化</h4>

<pre><code class="language-objectivec">- (instancetype)init {
    ...
    self.acceptableContentTypes = [NSSet setWithObjects:@&quot;application/json&quot;, @&quot;text/json&quot;, @&quot;text/javascript&quot;, nil];
    return self;
}

+ (instancetype)serializerWithReadingOptions:(NSJSONReadingOptions)readingOptions {
    AFJSONResponseSerializer *serializer = [[self alloc] init];
    serializer.readingOptions = readingOptions;
    return serializer;
}
</code></pre>

<p>设置了<code>acceptableContentTypes</code>属性</p>

<h4 id="toc_6">重写协议实现</h4>

<pre><code class="language-objectivec">- (id)responseObjectForResponse:(NSURLResponse *)response
                           data:(NSData *)data
                          error:(NSError *__autoreleasing *)error
{
    #1: 验证请求
    if (![self validateResponse:(NSHTTPURLResponse *)response data:data error:error]) {
        if (!error || AFErrorOrUnderlyingErrorHasCodeInDomain(*error, NSURLErrorCannotDecodeContentData, AFURLResponseSerializationErrorDomain)) {
            return nil;
        }
    }
    #2: 解决一个由只包含一个空格的响应引起的 bug, 略
    BOOL isSpace = [data isEqualToData:[NSData dataWithBytes:&quot; &quot; length:1]];
    
    if (data.length == 0 || isSpace) {
        return nil;
    }
    #3: 序列化 JSON
       NSError *serializationError = nil;
    
    id responseObject = [NSJSONSerialization JSONObjectWithData:data options:self.readingOptions error:&amp;serializationError];

    if (!responseObject)
    {
        if (error) {
            *error = AFErrorWithUnderlyingError(serializationError, *error);
        }
        return nil;
    }
    #4: 移除 JSON 中的 null
       if (self.removesKeysWithNullValues) {
        return AFJSONObjectByRemovingKeysWithNullValues(responseObject, self.readingOptions);
    }

    if (error) {
        *error = AFErrorWithUnderlyingError(serializationError, *error);
    }
    return responseObject;
}
</code></pre>

<p>其中移除JSON中null的函数是一个递归调用的函数</p>

<pre><code class="language-objectivec">static id AFJSONObjectByRemovingKeysWithNullValues(id JSONObject, NSJSONReadingOptions readingOptions) {
    if ([JSONObject isKindOfClass:[NSArray class]]) {
        NSMutableArray *mutableArray = [NSMutableArray arrayWithCapacity:[(NSArray *)JSONObject count]];
        for (id value in (NSArray *)JSONObject) {
            [mutableArray addObject:AFJSONObjectByRemovingKeysWithNullValues(value, readingOptions)];
        }

        return (readingOptions &amp; NSJSONReadingMutableContainers) ? mutableArray : [NSArray arrayWithArray:mutableArray];
    } else if ([JSONObject isKindOfClass:[NSDictionary class]]) {
        NSMutableDictionary *mutableDictionary = [NSMutableDictionary dictionaryWithDictionary:JSONObject];
        for (id &lt;NSCopying&gt; key in [(NSDictionary *)JSONObject allKeys]) {
            id value = (NSDictionary *)JSONObject[key];
            if (!value || [value isEqual:[NSNull null]]) {
                [mutableDictionary removeObjectForKey:key];
            } else if ([value isKindOfClass:[NSArray class]] || [value isKindOfClass:[NSDictionary class]]) {
            //移除value为null 的键值对
                mutableDictionary[key] = AFJSONObjectByRemovingKeysWithNullValues(value, readingOptions);
            }
        }

        return (readingOptions &amp; NSJSONReadingMutableContainers) ? mutableDictionary : [NSDictionary dictionaryWithDictionary:mutableDictionary];
    }

    return JSONObject;
}
</code></pre>

<h2 id="toc_7">AFURLRequestSerialization</h2>

<p><code>AFURLRequestSerialization</code>主要工作是对发出的HTTP请求进行处理</p>

<ol>
<li>处理查询的URL参数</li>
<li>设置HTTP头部字段</li>
<li>设置请求的属性</li>
<li>分块上传</li>
</ol>

<h3 id="toc_8">处理查询参数</h3>

<p>处理查询参数组要通过<code>AFQueryStringPair</code>类，以及一些C函数共同完成。<br/>
<code>AFQueryStringPair</code>中存储了两个属性</p>

<pre><code class="language-objectivec">@property (readwrite, nonatomic, strong) id field;
@property (readwrite, nonatomic, strong) id value;
</code></pre>

<p>对应HTTP请求中查询URL中的参数</p>

<pre><code class="language-objectivec">- (instancetype)initWithField:(id)field value:(id)value {
    self = [super init];
    if (!self) {
        return nil;
    }

    self.field = field;
    self.value = value;

    return self;
}

- (NSString *)URLEncodedStringValue {
    if (!self.value || [self.value isEqual:[NSNull null]]) {
        return AFPercentEscapedStringFromString([self.field description]);
    } else {
        return [NSString stringWithFormat:@&quot;%@=%@&quot;, AFPercentEscapedStringFromString([self.field description]), AFPercentEscapedStringFromString([self.value description])];
    }
}
</code></pre>

<p>使用<code>AFPercentEscapedStringFromString</code>C函数来对filed和value进行处理，使用URL形式，将特殊字符转为百分号表示形式。返回<code>key=value</code>这种形式</p>

<p>使用C函数<code>AFQueryStringPairsFromKeyAndValue</code>将参数字典转为<code>AFQueryStringPair</code>对象数组，然后使用<code>AFQueryStringFromParameters</code>用&amp;拼接参数，返回<code>username=dravenss&amp;password=123456&amp;hello[world]=helloworld<br/>
</code>形式</p>

<h3 id="toc_9">设置HTTP头部字段</h3>

<p><code>AFHTTPRequestSerializer</code>帮助我们设置HTTP请求头，在内部提供了<code>- (void)setValue:(NSString *)valueforHTTPHeaderField:(NSString *)field</code>方法来设置HTTP头部，它的实现基于<code>mutableHTTPRequestHeaders</code>属性</p>

<pre><code class="language-objectivec">@property (readwrite, nonatomic, strong) NSMutableDictionary *mutableHTTPRequestHeaders;

- (void)setValue:(NSString *)value
forHTTPHeaderField:(NSString *)field
{
    dispatch_barrier_async(self.requestHeaderModificationQueue, ^{
        [self.mutableHTTPRequestHeaders setValue:value forKey:field];
    });
}
</code></pre>

<p>当我们设置请求头时都会设置到<code>mutableHTTPRequestHeaders</code>这个可变字典中，当真正使用时，通过<code>HTTPRequestHeaders</code>方法来获取对应版本的不可变字典</p>

<pre><code class="language-objectivec">- (NSDictionary *)HTTPRequestHeaders {
    NSDictionary __block *value;
    dispatch_sync(self.requestHeaderModificationQueue, ^{
        value = [NSDictionary dictionaryWithDictionary:self.mutableHTTPRequestHeaders];
    });
    return value;
}
</code></pre>

<h4 id="toc_10">AFHTTPRequestSerializer设置常用的HTTP头</h4>

<p>在初始化时，根据编译平台  设置了<code>userAgent</code>字符串</p>

<pre><code class="language-objectivec">#if TARGET_OS_IOS
    // User-Agent Header; see http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.43
    userAgent = [NSString stringWithFormat:@&quot;%@/%@ (%@; iOS %@; Scale/%0.2f)&quot;, [[NSBundle mainBundle] infoDictionary][(__bridge NSString *)kCFBundleExecutableKey] ?: [[NSBundle mainBundle] infoDictionary][(__bridge NSString *)kCFBundleIdentifierKey], [[NSBundle mainBundle] infoDictionary][@&quot;CFBundleShortVersionString&quot;] ?: [[NSBundle mainBundle] infoDictionary][(__bridge NSString *)kCFBundleVersionKey], [[UIDevice currentDevice] model], [[UIDevice currentDevice] systemVersion], [[UIScreen mainScreen] scale]];
    
    if (userAgent) {
        if (![userAgent canBeConvertedToEncoding:NSASCIIStringEncoding]) {
            NSMutableString *mutableUserAgent = [userAgent mutableCopy];
            if (CFStringTransform((__bridge CFMutableStringRef)(mutableUserAgent), NULL, (__bridge CFStringRef)@&quot;Any-Latin; Latin-ASCII; [:^ASCII:] Remove&quot;, false)) {
                userAgent = mutableUserAgent;
            }
        }
        [self setValue:userAgent forHTTPHeaderField:@&quot;User-Agent&quot;];
    }
</code></pre>

<p>设置账号 密码等验证字段</p>

<pre><code class="language-objectivec">- (void)setAuthorizationHeaderFieldWithUsername:(NSString *)username
                                       password:(NSString *)password
{
    NSData *basicAuthCredentials = [[NSString stringWithFormat:@&quot;%@:%@&quot;, username, password] dataUsingEncoding:NSUTF8StringEncoding];
    NSString *base64AuthCredentials = [basicAuthCredentials base64EncodedStringWithOptions:(NSDataBase64EncodingOptions)0];
    [self setValue:[NSString stringWithFormat:@&quot;Basic %@&quot;, base64AuthCredentials] forHTTPHeaderField:@&quot;Authorization&quot;];
}

- (void)clearAuthorizationHeader {
    dispatch_barrier_async(self.requestHeaderModificationQueue, ^{
        [self.mutableHTTPRequestHeaders removeObjectForKey:@&quot;Authorization&quot;];
    });
}
</code></pre>

<h3 id="toc_11">设置请求的属性</h3>

<p><code>AFNetworking</code>提供了这些属性来设置</p>

<pre><code class="language-objectivec">@property (nonatomic, assign) BOOL allowsCellularAccess;

@property (nonatomic, assign) NSURLRequestCachePolicy cachePolicy;

@property (nonatomic, assign) BOOL HTTPShouldHandleCookies;

@property (nonatomic, assign) BOOL HTTPShouldUsePipelining;

@property (nonatomic, assign) NSURLRequestNetworkServiceType networkServiceType;

@property (nonatomic, assign) NSTimeInterval timeoutInterval;
</code></pre>

<p>存储在数组中</p>

<pre><code class="language-objectivec">static NSArray * AFHTTPRequestSerializerObservedKeyPaths() {
    static NSArray *_AFHTTPRequestSerializerObservedKeyPaths = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&amp;onceToken, ^{
        _AFHTTPRequestSerializerObservedKeyPaths = @[NSStringFromSelector(@selector(allowsCellularAccess)), NSStringFromSelector(@selector(cachePolicy)), NSStringFromSelector(@selector(HTTPShouldHandleCookies)), NSStringFromSelector(@selector(HTTPShouldUsePipelining)), NSStringFromSelector(@selector(networkServiceType)), NSStringFromSelector(@selector(timeoutInterval))];
    });

    return _AFHTTPRequestSerializerObservedKeyPaths;
}
</code></pre>

<p>当这些属性被设置时  会触发KVO，将新的属性存储在一个名字为<code>mutableObservedChangedKeyPaths</code>中</p>

<pre><code class="language-objectivec">- (void)observeValueForKeyPath:(NSString *)keyPath
                      ofObject:(__unused id)object
                        change:(NSDictionary *)change
                       context:(void *)context
{
    if (context == AFHTTPRequestSerializerObserverContext) {
        if ([change[NSKeyValueChangeNewKey] isEqual:[NSNull null]]) {
            [self.mutableObservedChangedKeyPaths removeObject:keyPath];
        } else {
            [self.mutableObservedChangedKeyPaths addObject:keyPath];
        }
    }
}
</code></pre>

<p>然后在生成request时 设置这些属性</p>

<pre><code class="language-objectivec">for (NSString *keyPath in AFHTTPRequestSerializerObservedKeyPaths()) {
        if ([self.mutableObservedChangedKeyPaths containsObject:keyPath]) {
            [mutableRequest setValue:[self valueForKeyPath:keyPath] forKey:keyPath];
        }
    }
</code></pre>

<h3 id="toc_12">流程</h3>

<p><code>AFHTTPRequestSerializer</code>会在<code>Manager</code>初始化之后进行一些初始化，它会根据当前系统环境预设置一些HTTP头部字段<code>Accept-Language</code>、<code>User-Agent</code>等</p>

<p>在完成了HTTP 请求头和属性的设置后，</p>

<p>在调用请求的方法时，会调用到序列化的这个方法</p>

<pre><code class="language-objectivec">- (NSMutableURLRequest *)requestWithMethod:(NSString *)method
                                 URLString:(NSString *)URLString
                                parameters:(id)parameters
                                     error:(NSError *__autoreleasing *)error
{
    NSParameterAssert(method);
    NSParameterAssert(URLString);

    NSURL *url = [NSURL URLWithString:URLString];

    NSParameterAssert(url);

    NSMutableURLRequest *mutableRequest = [[NSMutableURLRequest alloc] initWithURL:url];
    mutableRequest.HTTPMethod = method;

    for (NSString *keyPath in AFHTTPRequestSerializerObservedKeyPaths()) {
        if ([self.mutableObservedChangedKeyPaths containsObject:keyPath]) {
            [mutableRequest setValue:[self valueForKeyPath:keyPath] forKey:keyPath];
        }
    }

    mutableRequest = [[self requestBySerializingRequest:mutableRequest withParameters:parameters error:error] mutableCopy];

    return mutableRequest;
}
</code></pre>

<p>这个方法完成了一下几件事</p>

<ol>
<li>对参数进行检查</li>
<li>设置HTTP方法</li>
<li>通过<code>mutableObservedChangedKeyPaths</code>设置<code>NSMutableRequest</code>的属性</li>
<li><p>调用了<code>[AFHTTPRequestSerializer requestBySerializingRequest:withParameters:error:]</code>方法来设置HTTP头部字段和查询参数</p>
<p>在这个方法中做了两件事</p>
<ol>
<li>设置HTTP头部</li>
<li>调用<code>AFQueryStringFromParameters</code>将参数转为查询参数</li>
<li><p>将params添加到url或者http body中</p>
<pre><code class="language-objectivec">- (NSURLRequest *)requestBySerializingRequest:(NSURLRequest *)request
                           withParameters:(id)parameters<br/>
                                    error:(NSError *__autoreleasing *)error<br/>
{<br/>
    NSParameterAssert(request);<br/>
    NSMutableURLRequest *mutableRequest = [request mutableCopy];<br/>
    [self.HTTPRequestHeaders enumerateKeysAndObjectsUsingBlock:^(id field, id value, BOOL * __unused stop) {<br/>
        if (![request valueForHTTPHeaderField:field]) {<br/>
            [mutableRequest setValue:value forHTTPHeaderField:field];<br/>
        }<br/>
    }];<br/>
    NSString *query = nil;<br/>
    if (parameters) {<br/>
        if (self.queryStringSerialization) {<br/>
            NSError *serializationError;<br/>
            query = self.queryStringSerialization(request, parameters, &amp;serializationError);<br/>
            if (serializationError) {<br/>
                if (error) {<br/>
                    *error = serializationError;<br/>
                }<br/>
                return nil;<br/>
            }<br/>
        } else {<br/>
            switch (self.queryStringSerializationStyle) {<br/>
                case AFHTTPRequestQueryStringDefaultStyle:<br/>
                    query = AFQueryStringFromParameters(parameters);<br/>
                    break;<br/>
            }<br/>
        }<br/>
    }<br/>
    if ([self.HTTPMethodsEncodingParametersInURI containsObject:[[request HTTPMethod] uppercaseString]]) {<br/>
        if (query &amp;&amp; query.length &gt; 0) {<br/>
            mutableRequest.URL = [NSURL URLWithString:[[mutableRequest.URL absoluteString] stringByAppendingFormat:mutableRequest.URL.query ? @&quot;&amp;%@&quot; : @&quot;?%@&quot;, query]];<br/>
        }<br/>
    } else {<br/>
        // #2864: an empty string is a valid x-www-form-urlencoded payload<br/>
        if (!query) {<br/>
            query = @&quot;&quot;;<br/>
        }<br/>
        if (![mutableRequest valueForHTTPHeaderField:@&quot;Content-Type&quot;]) {<br/>
            [mutableRequest setValue:@&quot;application/x-www-form-urlencoded&quot; forHTTPHeaderField:@&quot;Content-Type&quot;];<br/>
        }<br/>
        [mutableRequest setHTTPBody:[query dataUsingEncoding:self.stringEncoding]];<br/>
    }<br/>
    return mutableRequest;<br/>
}
</code></pre></li>
</ol></li>
<li><p>最后这方法会返回一个<code>NSMutableURLRequest</code></p></li>
</ol>

<h3 id="toc_13">AFPropertyListRequestSerializer AFJSONRequestSerializer</h3>

<p><code>AFJSONRequestSerializer</code> 、 <code>AFPropertyListRequestSerializer</code><br/>
均继承自AFHTTPRequestSerializer  </p>

<p>其重写了<code>- (NSURLRequest *)requestBySerializingRequest:(NSURLRequest *)request withParameters:(id)parameters error:(NSError *__autoreleasing *)error</code>方法，主要内部修改了contentType和设置的httpBody的数据格式化</p>

<p>我们只需要在请求时设置manager 的 requestSerializer为<code>[AFJSONRequestSerializer serializer]</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AFURLSessionManager]]></title>
    <link href="https://acefish.github.io/15676621460215.html"/>
    <updated>2019-09-05T13:42:26+08:00</updated>
    <id>https://acefish.github.io/15676621460215.html</id>
    <content type="html"><![CDATA[
<p>根据作者:<br/>
<code>AFURLSessionManager</code>是基于一个指定的<code>NSURLSessionConfiguration</code>对象创建的用于管理<code>NSURLSession</code>对象。 其遵循了<code>NSURLSessionTaskDelegate、NSURLSessionDataDelegate、NSURLSessionDownloadDelegate、NSURLSessionDelegate</code>协议</p>

<pre><code class="language-objectivec">## NSURLSession &amp; NSURLSessionTask Delegate Methods

 `AFURLSessionManager` implements the following delegate methods:

 ### `NSURLSessionDelegate`

 - `URLSession:didBecomeInvalidWithError:`
 - `URLSession:didReceiveChallenge:completionHandler:`
 - `URLSessionDidFinishEventsForBackgroundURLSession:`

 ### `NSURLSessionTaskDelegate`

 - `URLSession:willPerformHTTPRedirection:newRequest:completionHandler:`
 - `URLSession:task:didReceiveChallenge:completionHandler:`
 - `URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:`
 - `URLSession:task:needNewBodyStream:`
 - `URLSession:task:didCompleteWithError:`

 ### `NSURLSessionDataDelegate`

 - `URLSession:dataTask:didReceiveResponse:completionHandler:`
 - `URLSession:dataTask:didBecomeDownloadTask:`
 - `URLSession:dataTask:didReceiveData:`
 - `URLSession:dataTask:willCacheResponse:completionHandler:`

 ### `NSURLSessionDownloadDelegate`

 - `URLSession:downloadTask:didFinishDownloadingToURL:`
 - `URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesWritten:totalBytesExpectedToWrite:`
 - `URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:`

 If any of these methods are overridden in a subclass, they _must_ call the `super` implementation first.

</code></pre>

<h2 id="toc_0">基本功能</h2>

<ol>
<li>创建和管理<code>NSURLSession</code></li>
<li>管理<code>NSURLSessionTask</code></li>
<li>实现<code>NSURLSessionDelegate</code>等协议中的代理方法</li>
<li>使用<code>AFURLSessionManagerTaskDelegate</code>管理进度</li>
<li>使用<code>_AFURLSessionTaskSwizzling</code>调剂方法</li>
<li>引入<code>AFSecurityPolicy</code>保证请求的安全</li>
<li>引入<code>AFNetworkReachabilityManager</code>监控网络状态</li>
</ol>

<h2 id="toc_1">创建和管理NSURLSession</h2>

<p>初始化方法</p>

<pre><code class="language-objectivec">- (instancetype)initWithSessionConfiguration:(NSURLSessionConfiguration *)configuration {

    //配置会话设置
    if (!configuration) {
        configuration = [NSURLSessionConfiguration defaultSessionConfiguration];
    }
    self.sessionConfiguration = configuration;
    
    self.operationQueue = [[NSOperationQueue alloc] init];
    self.operationQueue.maxConcurrentOperationCount = 1;
    
    //设置NSURLSessionDelegate代理 和 代理queue
    self.session = [NSURLSession sessionWithConfiguration:self.sessionConfiguration delegate:self delegateQueue:self.operationQueue];
    
    //初始化响应序列
    self.responseSerializer = [AFJSONResponseSerializer serializer];
    
    //初始化安全认证
    self.securityPolicy = [AFSecurityPolicy defaultPolicy];
    
    #if !TARGET_OS_WATCH
    //初始化网络监测状态
    self.reachabilityManager = [AFNetworkReachabilityManager sharedManager];
    #endif

    //初始化保存dataTask的字典
    self.mutableTaskDelegatesKeyedByTaskIdentifier = [[NSMutableDictionary alloc] init];
    
    self.lock = [[NSLock alloc] init];
    self.lock.name = AFURLSessionManagerLockName;
    
    //为已有task设置代理  
    [self.session getTasksWithCompletionHandler:^(NSArray *dataTasks, NSArray *uploadTasks, NSArray *downloadTasks) {
        for (NSURLSessionDataTask *task in dataTasks) {
            [self addDelegateForDataTask:task uploadProgress:nil downloadProgress:nil completionHandler:nil];
        }

        for (NSURLSessionUploadTask *uploadTask in uploadTasks) {
            [self addDelegateForUploadTask:uploadTask progress:nil completionHandler:nil];
        }

        for (NSURLSessionDownloadTask *downloadTask in downloadTasks) {
            [self addDelegateForDownloadTask:downloadTask progress:nil destination:nil completionHandler:nil];
        }
    }];
}
</code></pre>

<h2 id="toc_2">NSURLSessionTask</h2>

<p><code>AFURLSessionManager</code>中提供了一系列的获取dataTask的方法</p>

<pre><code class="language-objectivec">//upload 
- (NSURLSessionUploadTask *)uploadTaskWithRequest:(NSURLRequest *)request
                                         fromFile:(NSURL *)fileURL
                                         progress:(void (^)(NSProgress *uploadProgress)) uploadProgressBlock
                                completionHandler:(void (^)(NSURLResponse *response, id responseObject, NSError *error))completionHandler

//download                                
- (NSURLSessionDownloadTask *)downloadTaskWithRequest:(NSURLRequest *)request
                                             progress:(void (^)(NSProgress *downloadProgress)) downloadProgressBlock
                                          destination:(NSURL * (^)(NSURL *targetPath, NSURLResponse *response))destination
                                    completionHandler:(void (^)(NSURLResponse *response, NSURL *filePath, NSError *error))completionHandler


//
- (NSURLSessionDataTask *)dataTaskWithRequest:(NSURLRequest *)request
                               uploadProgress:(nullable void (^)(NSProgress *uploadProgress)) uploadProgressBlock
                             downloadProgress:(nullable void (^)(NSProgress *downloadProgress)) downloadProgressBlock
                            completionHandler:(nullable void (^)(NSURLResponse *response, id _Nullable responseObject,  NSError * _Nullable error))completionHandler {

    __block NSURLSessionDataTask *dataTask = nil;
    url_session_manager_create_task_safely(^{
        dataTask = [self.session dataTaskWithRequest:request];
    });

    [self addDelegateForDataTask:dataTask uploadProgress:uploadProgressBlock downloadProgress:downloadProgressBlock completionHandler:completionHandler];

    return dataTask;
}
</code></pre>

<p>使用<code>url_session_manager_create_task_safely</code>的原因是 苹果的框架的<a href="https://github.com/AFNetworking/AFNetworking/issues/2093">bug</a>，在并行队列中创建task时，因为可能返回的taskIdentifier，先前的complectionHandel被替换为新的，即对第二个任务调用第一个响应.（在iOS8之后问题已修复）</p>

<p>调用了<code>addDelegateForDataTask: uploadProgress: downloadProgress: completionHandler:</code>方法</p>

<pre><code class="language-objectivec">- (void)addDelegateForDataTask:(NSURLSessionDataTask *)dataTask
                uploadProgress:(nullable void (^)(NSProgress *uploadProgress)) uploadProgressBlock
              downloadProgress:(nullable void (^)(NSProgress *downloadProgress)) downloadProgressBlock
             completionHandler:(void (^)(NSURLResponse *response, id responseObject, NSError *error))completionHandler
{
    AFURLSessionManagerTaskDelegate *delegate = [[AFURLSessionManagerTaskDelegate alloc] initWithTask:dataTask];
    delegate.manager = self;
    delegate.completionHandler = completionHandler;

    dataTask.taskDescription = self.taskDescriptionForSessionTasks;
    [self setDelegate:delegate forTask:dataTask];

    delegate.uploadProgressBlock = uploadProgressBlock;
    delegate.downloadProgressBlock = downloadProgressBlock;
}

- (void)setDelegate:(AFURLSessionManagerTaskDelegate *)delegate
            forTask:(NSURLSessionTask *)task
{
    NSParameterAssert(task);
    NSParameterAssert(delegate);

    [self.lock lock];
    self.mutableTaskDelegatesKeyedByTaskIdentifier[@(task.taskIdentifier)] = delegate;
    [self addNotificationObserverForTask:task];
    [self.lock unlock];
}

- (void)addNotificationObserverForTask:(NSURLSessionTask *)task {
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(taskDidResume:) name:AFNSURLSessionTaskDidResumeNotification object:task];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(taskDidSuspend:) name:AFNSURLSessionTaskDidSuspendNotification object:task];
}
</code></pre>

<p>创建了一个<code>AFURLSessionManagerTaskDelegate</code>对象 <br/>
并在其内部执行了<code>setDelegate</code>来设置代理</p>

<p><code>AFURLSessionManager</code>就是通过字典<code>mutableTaskDelegatesKeyedByTaskIdentifier</code>来存储和管理每一个<code>NSURLSessionTask</code>，它以<code>taskIdentifier</code>为键存储task</p>

<h2 id="toc_3">NSURLSessionDelegate</h2>

<p>前面说过<code>AFURLSessionManager</code>遵循了一下代理</p>

<ul>
<li>NSURLSessionDelegate</li>
<li>NSURLSessionTaskDelegate</li>
<li>NSURLSessionDataDelegate</li>
<li>NSURLSessionDownloadDelegate</li>
</ul>

<p>我们在使用<code>AFURLSessionManager</code>的初始化方法时 设置 session的delegate为self</p>

<pre><code class="language-objectivec">- (void)URLSession:(NSURLSession *)session didBecomeInvalidWithError:(NSError *)error {
    if (self.sessionDidBecomeInvalid) {
        self.sessionDidBecomeInvalid(session, error);
    }

    [[NSNotificationCenter defaultCenter] postNotificationName:AFURLSessionDidInvalidateNotification object:session];
}

- (void)URLSession:(NSURLSession *)session
didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge
 completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential *credential))completionHandler {
    
 }
</code></pre>

<p>遵循这些协议实现其方法，然后将其提供更简洁的block接口<br/>
将block存在对应属性中，当代理方法调用时，执行对应的block</p>

<pre><code class="language-objectivec">- (void)setSessionDidBecomeInvalidBlock:(void (^)(NSURLSession *session, NSError *error))block {
    self.sessionDidBecomeInvalid = block;
}

- (void)setSessionDidReceiveAuthenticationChallengeBlock:(NSURLSessionAuthChallengeDisposition (^)(NSURLSession *session, NSURLAuthenticationChallenge *challenge, NSURLCredential * __autoreleasing *credential))block {
    self.sessionDidReceiveAuthenticationChallenge = block;
}
</code></pre>

<h2 id="toc_4">AFURLSessionManagerTaskDelegate管理进度</h2>

<p>主要为task提供进度管理功能，并在task结束时回调，即调用<code>completionHandel</code></p>

<pre><code class="language-objectivec">- (instancetype)initWithTask:(NSURLSessionTask *)task {
    _mutableData = [NSMutableData data];
    _uploadProgress = [[NSProgress alloc] initWithParent:nil userInfo:nil];
    _downloadProgress = [[NSProgress alloc] initWithParent:nil userInfo:nil];
    
    __weak __typeof__(task) weakTask = task;
    for (NSProgress *progress in @[ _uploadProgress, _downloadProgress ])
    {
        progress.totalUnitCount = NSURLSessionTransferSizeUnknown;
        progress.cancellable = YES;
        progress.cancellationHandler = ^{
            [weakTask cancel];
        };
        progress.pausable = YES;
        progress.pausingHandler = ^{
            [weakTask suspend];
        };
#if AF_CAN_USE_AT_AVAILABLE
        if (@available(iOS 9, macOS 10.11, *))
#else
        if ([progress respondsToSelector:@selector(setResumingHandler:)])
#endif
        {
            progress.resumingHandler = ^{
                [weakTask resume];
            };
        }
        
        [progress addObserver:self
                   forKeyPath:NSStringFromSelector(@selector(fractionCompleted))
                      options:NSKeyValueObservingOptionNew
                      context:NULL];
    }
    return self;
}
</code></pre>

<p>主要设置了<code>uploadProgress</code>和<code>downloadProgress</code>的回调，当NSProgress的状态改变时，调用相应的task方法，如：resume和suspend来改变task状态</p>

<h3 id="toc_5">代理方法 URLSession:task:didCompleteWithError:</h3>

<p>当sessionManager收到代理,将消息转发给task对应的<code>AFURLSessionManagerTaskDelegate</code></p>

<pre><code class="language-objectivec">- (void)URLSession:(NSURLSession *)session
              task:(NSURLSessionTask *)task
didCompleteWithError:(NSError *)error {
    if (delegate) {
        [delegate URLSession:session task:task didCompleteWithError:error];
        [self removeDelegateForTask:task];
    }

    if (self.taskDidComplete) {
        self.taskDidComplete(session, task, error);
    }
}
</code></pre>

<p><code>AFURLSessionManagerTaskDelegate</code>主要调用传入的<code>completionHandle</code>,然后发出<code>AFNetworkingTaskDidCompleteNotification</code>通知</p>

<pre><code class="language-objectivec">- (void)URLSession:(__unused NSURLSession *)session
              task:(NSURLSessionTask *)task
didCompleteWithError:(NSError *)error {
    __strong AFURLSessionManager *manager = self.manager;
    //从mutableData取出数据 设置UserInfo
    __block NSMutableDictionary *userInfo = [NSMutableDictionary dictionary];
    userInfo[AFNetworkingTaskDidCompleteResponseSerializerKey] = manager.responseSerializer;
    NSData *data = nil;
    if (self.mutableData) {
        data = [self.mutableData copy];
        self.mutableData = nil;
    }
    if (self.downloadFileURL) {
        userInfo[AFNetworkingTaskDidCompleteAssetPathKey] = self.downloadFileURL;
    } else if (data) {
        userInfo[AFNetworkingTaskDidCompleteResponseDataKey] = data;
    }
    //使用 complectionGroup或者complectionQueue 否则创建一个group和主线程调用completionHandler，并在主线程发出通知
    if (error) {
        dispatch_group_async(manager.completionGroup, manager.completionQueue, ^{
            self.completionHandler(task.response, responseObject, error);
            dispatch_async(dispatch_get_main_queue(), ^{
                [[NSNotificationCenter defaultCenter] postNotificationName:AFNetworkingTaskDidCompleteNotification object:task userInfo:userInfo];
            });
        })
    } else {
        dispatch_async(url_session_manager_processing_queue(), ^{
            responseObject = [manager.responseSerializer responseObjectForResponse:task.response data:data error:&amp;serializationError];
            dispatch_group_async(manager.completionGroup, manager.completionQueue, ^{
            self.completionHandler(task.response, responseObject, error);
            dispatch_async(dispatch_get_main_queue(), ^{
                [[NSNotificationCenter defaultCenter] postNotificationName:AFNetworkingTaskDidCompleteNotification object:task userInfo:userInfo];
            });
        })
        }
    }

}
</code></pre>

<h3 id="toc_6">代理方法 URLSession:dataTask:didReceiveData: 和 - URLSession:downloadTask:didFinishDownloadingToURL:</h3>

<pre><code class="language-objectivec">//在收到数据时调用
- (void)URLSession:(__unused NSURLSession *)session
          dataTask:(__unused NSURLSessionDataTask *)dataTask
    didReceiveData:(NSData *)data
{
    self.downloadProgress.totalUnitCount = dataTask.countOfBytesExpectedToReceive;
    self.downloadProgress.completedUnitCount = dataTask.countOfBytesReceived;

    [self.mutableData appendData:data];
}

//在下载对应文件时调用
- (void)URLSession:(NSURLSession *)session
      downloadTask:(NSURLSessionDownloadTask *)downloadTask
didFinishDownloadingToURL:(NSURL *)location
{
    self.downloadFileURL = nil;

    if (self.downloadTaskDidFinishDownloading) {
        self.downloadFileURL = self.downloadTaskDidFinishDownloading(session, downloadTask, location);
        if (self.downloadFileURL) {
            NSError *fileManagerError = nil;

            if (![[NSFileManager defaultManager] moveItemAtURL:location toURL:self.downloadFileURL error:&amp;fileManagerError]) {
                [[NSNotificationCenter defaultCenter] postNotificationName:AFURLSessionDownloadTaskDidFailToMoveFileNotification object:downloadTask userInfo:fileManagerError.userInfo];
            }
        }
    }
}
</code></pre>

<h2 id="toc_7">_AFURLSessionTaskSwizzling调剂方法</h2>

<p><code>_AFURLSessionTaskSwizzling</code>功能就是修改<code>NSURLSessionTask</code>的<code>resume</code>和<code>suspend</code>方法，替换原有的实现</p>

<pre><code class="language-objectivec">- (void)af_resume {
    NSAssert([self respondsToSelector:@selector(state)], @&quot;Does not respond to state&quot;);
    NSURLSessionTaskState state = [self state];
    [self af_resume];
    
    if (state != NSURLSessionTaskStateRunning) {
        [[NSNotificationCenter defaultCenter] postNotificationName:AFNSURLSessionTaskDidResumeNotification object:self];
    }
}

- (void)af_suspend {
    NSAssert([self respondsToSelector:@selector(state)], @&quot;Does not respond to state&quot;);
    NSURLSessionTaskState state = [self state];
    [self af_suspend];
    
    if (state != NSURLSessionTaskStateSuspended) {
        [[NSNotificationCenter defaultCenter] postNotificationName:AFNSURLSessionTaskDidSuspendNotification object:self];
    }
}
</code></pre>

<p>这是为了在调用方法时 发出通知</p>

<p>在load时执行方法替换操作，但是因为NSURLSessionTask在iOS7和8的实现有所不同 导致以下代码有点复杂</p>

<p>在iOS7上，<code>localDataTask</code>是一个<code>__NSCFLocalDataTask</code>，它继承自<code>__NSCFLocalSessionTask</code>，它继承自<code>__NSCFURLSessionTask</code><br/>
在iOS8上，<code>localDataTask</code>是一个<code>__NSCFLocalDataTask</code>，它继承自<code>__NSCFLocalSessionTask</code>，它继承自<code>NSURLSessionTask</code><br/>
在iOS7上，<code>__ NSCFLocalSessionTask</code>和<code>__NSCFURLSessionTask</code>是唯一具有自己的<code>resume</code>和<code>suspend</code>实现的两个类，而__NSCFLocalSessionTask<code>则不会调用超级。这意味着两个类都需要调整。<br/>
在iOS 8上，</code>NSURLSessionTask<code>是唯一实现</code>resume<code>和</code>suspend`的类。这意味着这是唯一需要调整的类。</p>

<p>因为<code>NSURLSession</code>是使用类群实现的，因此从API请求的类并不是将获得的类的类型.所以直接简单的使用<code>[NSURLSessionTask class]</code>将不起作用的。需要用<code>NSURLSession</code>来实际创建一个对象，并从该对象处获取该类</p>

<p>因此实现方案如下</p>

<ol>
<li>通过获取<code>NSURLSession</code>实例来获取<code>_NSCFLocalDataTask</code>实例</li>
<li>获取指向<code>af_resume</code>的原始实现指针</li>
<li>检查当前类是否有<code>resume</code>实现 如果有继续执行步骤4</li>
<li>获取当前类的父类</li>
<li>获取父类的<code>resume</code>实现指针</li>
<li>获取当前类的<code>resume</code>实现指针</li>
<li>加入当前类的resume实现与父类不同，并且当前类的resume实现和<code>af_resume</code>实现不同，则替换两个方法实现</li>
<li>设置当前类为父类 重复步骤3-8</li>
</ol>

<pre><code class="language-objectivec">+ (void)load {
    if (NSClassFromString(@&quot;NSURLSessionTask&quot;)) {
        NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration ephemeralSessionConfiguration];
        NSURLSession * session = [NSURLSession sessionWithConfiguration:configuration];
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored &quot;-Wnonnull&quot;
        NSURLSessionDataTask *localDataTask = [session dataTaskWithURL:nil];
#pragma clang diagnostic pop
        IMP originalAFResumeIMP = method_getImplementation(class_getInstanceMethod([self class], @selector(af_resume)));
        Class currentClass = [localDataTask class];
        
        while (class_getInstanceMethod(currentClass, @selector(resume))) {
            Class superClass = [currentClass superclass];
            IMP classResumeIMP = method_getImplementation(class_getInstanceMethod(currentClass, @selector(resume)));
            IMP superclassResumeIMP = method_getImplementation(class_getInstanceMethod(superClass, @selector(resume)));
            if (classResumeIMP != superclassResumeIMP &amp;&amp;
                originalAFResumeIMP != classResumeIMP) {
                [self swizzleResumeAndSuspendMethodForClass:currentClass];
            }
            currentClass = [currentClass superclass];
        }
        
        [localDataTask cancel];
        [session finishTasksAndInvalidate];
    }
}
</code></pre>

<h2 id="toc_8">引入AFSecurityPolicy来保证请求的安全</h2>

<p>调用了<code>-[AFSecurityPolicy evaluateServerTrust:forDomain:]</code>方法来判断当前服务器是否被信任</p>

<h2 id="toc_9">引入AFNetworkReachabilityManager监控网络状态</h2>

<p><code>AFURLSessionManager</code>的网络状态由<code>AFNetworkReachabilityManager</code>监控，并持有一个该对象</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AFNetworking]]></title>
    <link href="https://acefish.github.io/15675682575589.html"/>
    <updated>2019-09-04T11:37:37+08:00</updated>
    <id>https://acefish.github.io/15675682575589.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">NSURLSession</h2>

<p><code>NSURLSession</code>获取HTTP请求数据步骤：</p>

<ol>
<li>实例化一个<code>NSURLRequest/NSMutalbeRequest</code>,设置要请求的url</li>
<li>获取NSUrlSession实例</li>
<li>通过<code>dataWithRequest:completionHandle:</code>返回一个<code>dataTask</code></li>
<li>向该对象发送消息<code>resume</code>执行这个任务</li>
<li>在<code>completion</code>中 将对象编码 返回字符串</li>
</ol>

<pre><code class="language-objectivec">NSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:[[NSURL alloc] initWithString:@&quot;https://github.com&quot;]];
NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *task = [session dataTaskWithRequest:request
                                       completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {
                                           NSString *dataStr = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
                                           NSLog(@&quot;%@&quot;, dataStr);
                                       }];
[task resume];
</code></pre>

<h2 id="toc_1">AFNetworking</h2>

<pre><code class="language-objectivec">AFHTTPSessionManager *manager = [[AFHTTPSessionManager alloc] initWithBaseURL:[[NSURL alloc] initWithString:@&quot;hostname&quot;]];
[manager GET:@&quot;relative_url&quot; parameters:nil progress:nil
    success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSLog(@&quot;%@&quot; ,responseObject);
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@&quot;%@&quot;, error);
    }];
</code></pre>

<p>AFNetworking默认接收json格式的响应，如果想要其它格式的 设置<code>acceptableContentTypes</code></p>

<h2 id="toc_2">AFNetworking的调用栈</h2>

<ol>
<li><p><code>AFHTTPSessionManager</code>的初始化方法<code>- initWithBaseURL:</code></p>
<pre><code class="language-objectivec">- [AFHTTPSessionManager initWithBaseURL:]
    - [AFHTTPSessionManager initWithBaseURL:sessionConfiguration:]<br/>
        - [AFURLSessionManager initWithSessionConfiguration:]<br/>
            - [NSURLSession sessionWithConfiguration:delegate:delegateQueue:]<br/>
            - [AFJSONResponseSerializer serializer] // 负责序列化响应<br/>
            - [AFSecurityPolicy defaultPolicy] // 负责身份认证<br/>
            - [AFNetworkReachabilityManager sharedManager] // 查看网络连接情况<br/>
        - [AFHTTPRequestSerializer serializer] // 负责序列化请求<br/>
        - [AFJSONResponseSerializer serializer] // 负责序列化响应
</code></pre>
<ul>
<li>其中<code>AFURLSessionManager</code>是<code>AFHTTPSessionManager</code>的父类</li>
<li><code>AFURLSessionManager</code>负责生成<code>NSURLSession</code>实例，并且管理<code>AFSecurityPolicy</code>和<code>AFNetworkReachabilityManager</code>，来保证请求的安全和查看网络连接情况，<code>AFJSONResponseSerializer</code>实例用来序列号HTTP响应</li>
<li><code>AFHTTPSessionManager</code>有自己的<code>AFHTTPRequestSerializer</code>和<code>AFJSONResponseSerializer</code>来管理请求和响应的序列化，同时依赖父类提供的接口保证安全、监控网络状态，实现发送HTTP</li>
</ul></li>
<li><p><code>GET:Params:progress:success:</code>的调用栈</p>
<pre><code class="language-objectivec">- [AFHTTPSessionManager GET:parameters:process:success:failure:]
    - [AFHTTPSessionManager dataTaskWithHTTPMethod:parameters:uploadProgress:downloadProgress:success:failure:] // 返回 NSURLSessionDataTask #1<br/>
        - [AFHTTPRequestSerializer requestWithMethod:URLString:parameters:error:] // 返回 NSMutableURLRequest<br/>
        - [AFURLSessionManager dataTaskWithRequest:uploadProgress:downloadProgress:completionHandler:] // 返回 NSURLSessionDataTask #2<br/>
            - [NSURLSession dataTaskWithRequest:] // 返回 NSURLSessionDataTask #3<br/>
            - [AFURLSessionManager addDelegateForDataTask:uploadProgress:downloadProgress:completionHandler:]<br/>
                - [AFURLSessionManagerTaskDelegate init]<br/>
                - [AFURLSessionManager setDelegate:forTask:]<br/>
    - [NSURLSessionDataTask resume]
</code></pre>
<p>在#3出调用了系统的请求方法，返回dataTask 然后调用<code>resume</code>方法执行请求，并在某些实践之星时通知代理<code>AFURLSessionManagerTaskDelegate</code></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="https://acefish.github.io/15669011764410.html"/>
    <updated>2019-08-27T18:19:36+08:00</updated>
    <id>https://acefish.github.io/15669011764410.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reactive Cocoa Tutorial]]></title>
    <link href="https://acefish.github.io/15647325396059.html"/>
    <updated>2019-08-02T15:55:39+08:00</updated>
    <id>https://acefish.github.io/15647325396059.html</id>
    <content type="html"><![CDATA[
<p>学习地址  sunnyxx<a href="http://blog.sunnyxx.com/2014/03/06/rac_1_macros/">Reactive Cocoa Tutorial</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Texture(AsynDisplayKit)]]></title>
    <link href="https://acefish.github.io/15647308243504.html"/>
    <updated>2019-08-02T15:27:04+08:00</updated>
    <id>https://acefish.github.io/15647308243504.html</id>
    <content type="html"><![CDATA[
<p>学习自 <a href="https://time.geekbang.org/column/article/92384">iOS开发高手课</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[图像解压缩]]></title>
    <link href="https://acefish.github.io/15646478175328.html"/>
    <updated>2019-08-01T16:23:37+08:00</updated>
    <id>https://acefish.github.io/15646478175328.html</id>
    <content type="html"><![CDATA[
<p>学习自<a href="http://www.cocoachina.com/articles/18784">谈谈 iOS 中图片的解压缩</a></p>

<p>从磁盘加载一张照片，并且将其显示到屏幕上，需要的工作流如下:</p>

<ol>
<li>假设适应+imageWithContentFile：从磁盘加载一张照片，这是图片还没有解压缩</li>
<li>将生成的UIImage赋值给UIImageView</li>
<li>一个隐式的CATransaction捕获到了UIImageView图层树的变化</li>
<li>主线程的下一个runloop 到来时，CoreAnimation提交这个隐式的transaction。这个过程可能对图片执行copy操作，而受图片是否字节对齐等因素的影响，这个copy操作会涉及以下部分或全部步骤:
<ul>
<li>分配内存缓冲区用于管理文件IO和解压缩操作</li>
<li>将文件数据从磁盘读到内存中</li>
<li>将压缩的图片数据解码成未压缩的位图形式，这是非常耗时的cpu操作</li>
<li>最后<code>Core Animation</code>使用未压缩的位图数据渲染UIImageView图层</li>
</ul></li>
</ol>

<blockquote>
<p>图片解压缩是一个非常耗时的CPU操作，并且默认是在主线程中执行的。当在主线程需要加载图片较多时，就会对应用响应性造成严重影响，尤其在快速滑动的列表中</p>
</blockquote>

<h3 id="toc_0">图片的解压缩</h3>

<p>图片是无法直接显示到屏幕上，需要转换为位图。<strong>位图就是一个像素数组，没个像素就代表图片中的一个点。</strong><br/>
<strong>解压缩后的图片大小与原始文件是大小之间没有任何关系，而只与图片的像素有关</strong><br/>
<code>解压缩后的图片大小 = 图片的像素宽  * 图片的像素高 * 每个像素所占的字节数 4</code></p>

<p>不论是JPEG还是PNG图片都是压缩的位图形式，只不过PNG是无损压缩并且支持alpha听到，而JPEG图片是有损压缩，可以指定0-100%的压缩比。<br/>
因此，将磁盘中的图片渲染到屏幕上之前，必须得到图片的原始像素数据，才能执行后续绘制操作，也就是必须解压缩之后才能渲染了</p>

<h2 id="toc_1">强制解压缩</h2>

<p>为了不在主线程解压缩，影响性能，我们可以在子线程提前对图片进行解压缩，图片已经解压缩再渲染是，系统就不会图片再执行解压缩了</p>

<p><strong>强制解压缩的原理就是对图片进行重新绘制，得到新的解压缩后的位图，用到最核心的就是<code>CGBitmapContextCreat</code></strong></p>

<pre><code class="language-objectivec">CG_EXTERN CGContextRef __nullable CGBitmapContextCreate(void * __nullable data,
    size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow,
    CGColorSpaceRef cg_nullable space, uint32_t bitmapInfo)
    CG_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
</code></pre>

<h4 id="toc_2">pixel Format</h4>

<p>位图是一个像素数组，而<em>像素格式</em>则是用来描述每个像素的组成格式，它包括了:</p>

<p><code>Bits per component</code>：一个像素中每个独立的颜色分量使用的 bit 数；<br/>
<code>Bits per pixel</code>: 像素深度: 存储每个像素所用的位数，也可以用它度量图像的分辨率<br/>
<code>Bytes per row</code>: 位图中每一行使用的字节数</p>

<p>对于位图来说，像素格式并不是随意组合的，目前只有一下17种特定组合:</p>

<p><img src="media/15646478175328/15646579123618.jpg" alt="" style="width:769px;"/></p>

<p>而iOS只支持其中的8中像素格式。颜色空间为Null的1种，Gary的2种，RGB的5种，即iOS不支持CMYK颜色空间。</p>

<h4 id="toc_3">颜色空间</h4>

<p>颜色空间用来使用一组值表示颜色。比如：<code>0、0、1</code>在RGB下表示蓝色，在brg下表示红色等。</p>

<p>.<br/>
.<br/>
.<br/>
.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="https://acefish.github.io/15646313097300.html"/>
    <updated>2019-08-01T11:48:29+08:00</updated>
    <id>https://acefish.github.io/15646313097300.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[包大小]]></title>
    <link href="https://acefish.github.io/15645609012102.html"/>
    <updated>2019-07-31T16:15:01+08:00</updated>
    <id>https://acefish.github.io/15645609012102.html</id>
    <content type="html"><![CDATA[
<p>学习自 <a href="https://time.geekbang.org/column/article/88573">iOS开发高手课-包大小：如何从资源和代码层面实现全方位瘦身？</a></p>

<p>APPStore对大于150M的应用无法再OTA环境下载，这就只能在wifi环境下下载，因此150M就是App的生死线</p>

<p>如果App要兼容iOS7和iOS8的话，苹果规定主二进制 text 段的大小不能超过 60MB，如果没有达到这个标准，甚至无法提交AppStore</p>

<h2 id="toc_0">App Thinning</h2>

<p><code>App Thinning</code>是苹果公司推出的一项可以改善APP下载进程的新技术，主要为解决用户下载APP耗费流量过高，并节省用户iOS设备存储空间</p>

<p>因为iOS设备的屏幕尺寸和分辨率 越来越多样化，就需要更多资源来匹配不同尺寸和分辨率。同时，App也会有32位、64位不同芯片架构的优化版本。如果这些都在同一个包中，那么用户下载包的大小势必就会变得更大</p>

<p>而苹果提供的<code>App Thinning</code>就是针对不同的设备只选择适合当前设备的内容进行下载。比如，iPhone6只下载2x资源，而iPhone6 P则只下载3x图片资源</p>

<p>在之前，每个app包会包含多个芯片的指令集架构文件。在而使用<code>App Thinning</code>后，用户下载时就只会下载一个适合自己设备的芯片指令集架构文件</p>

<p>下图为所有设备的芯片指令集以及支持的最高和最低版本<br/>
<img src="media/15645609012102/15645634237337.png" alt=""/></p>

<p><strong><code>App Thinning</code>有三种方式，包括： App Slicing、Bitcode、On-Demand Resource</strong></p>

<ul>
<li>App Slicing：会在你向iTunnes Connrct上传App后，对App做切个，创建不同的变体，来适应不同的设备</li>
<li>On-Demand Resource，主要是为游戏多关卡场景服务。可以根据用户的关卡进度下载随后关卡资源，并且删除已过关的资源，来减少出装app的大小</li>
<li>Bitcode， 针对特定设备进行包大小优化，优化并不明显</li>
</ul>

<h3 id="toc_1">App Thinning的使用</h3>

<p>使用App Thinning很简单，只需要通过Xcode添加 xcassets目录，然后将资源文件放进来即可：</p>

<p>即添加<code>Asset Catalog</code>模板，按照模板添加资源即可，apple会创建不同的变体来减少app安装体积</p>

<h2 id="toc_2">图片资源优化</h2>

<p>图片资源的优化空间主要体现在删除无用图片和图片资源压缩两方面。</p>

<h3 id="toc_3">查找无用图片资源</h3>

<ol>
<li>通过find获取App安装包中所有资源文件 </li>
<li>设置用到的资源类型，比如jpg、gif、png、webp</li>
<li>使用正则表达式匹配在源码中找出使用到的资源名，比如<code>pattern=@&quot;@&quot;(.+?)&quot;&quot;</code></li>
<li>使用find命令找到所有资源文件，再去掉代码中使用到的资源文件，剩下的就是未使用到的了</li>
<li>对于按照规则设置的资源名字，我们需要在匹配使用资源的正则表达式里，添加响应的规则，比如<code>image_%d</code></li>
<li>确认无用资源后，就可以对无用资源执行删除操作了，这个删除操作可以使用<code>NSFileManager</code>系统类功能完成</li>
</ol>

<p>可以使用一些开源的工具，推荐的为<a href="https://github.com/tinymind/LSUnusedResources">LSUnusedResources</a>,其还可以对使用编号规则的图片，直接添加规则处理</p>

<p><img src="media/15645609012102/15645678390885.gif" alt="" style="width:500px;"/></p>

<h3 id="toc_4">图片资源压缩</h3>

<p>在App中 图片资源总是占大头的。因此我们最好在不损失图片质量的前提下，尽可能的压缩。目前最好的压缩方案就是，将图片转为<a href="https://developers.google.com/speed/webp/">webP</a>(其是谷歌的一个开源项目)。</p>

<ul>
<li>WebP压缩率高，而且肉眼看不出来差异，同时支持有损和无损两种压缩模式。比如，将Gif专务Anumated WebP，有损模式下会减少64%大小，无损模式下会减少19%大小</li>
<li>WebP支持Alpha透明和24-bit颜色数，不会像PNG8那样因为颜色不够而出现毛边</li>
</ul>

<h4 id="toc_5">将图片转为webP</h4>

<p>Google提供了<code>cwebp</code>工具来将其它图片转成WebP。cwebp只需根据图片情况设置相应参数即可：</p>

<pre><code class="language-text">cwebp [options] input_file -o output_file.webp

//比如无损压缩文件命令如下   -lossless表示无损压缩
cwebp -lossless original.png -o new.webp
</code></pre>

<p>注意：<br/>
在图片色值不同的情况下，可以选择用-q参数进行设置，在不损失图片质量情况下进行最大化压缩：</p>

<ul>
<li>小于256色适合无损压缩，压缩率高，参数使用-lossless -q 100</li>
<li>大于256色适合用75%的有损压缩，参数使用-q 75</li>
<li>远大于256色 适合使用75%一下的压缩率，参数-q 50 -m 6</li>
</ul>

<p>除了使用google提供的cwebp工具外，可以使用企鹅公司开发的<a href="http://isparta.github.io/">iSparta</a>图形化工具，实现PNG到WebP转换，还可以批量处理和记录操作配置。至于其他格式图片，那就先转png再转webP即可</p>

<h4 id="toc_6">显示WebP图片</h4>

<p>在图片压缩完成后，还需要在项目中显示图片，使用<code>libwebp</code>进行解析。可以参考<a href="https://github.com/carsonmcdonald/WebP-iOS-example">这个iOS项目范例</a></p>

<p>当然，因为WebP进行了压缩，因此在CPU消耗和解码时间上是会比PNG大两倍。所以，需要在性能和体积上做出取舍</p>

<p><strong>建议： 如果图片大小超过100K，考虑使用WebP；小于100K时，可以使用网页工具<a href="https://tinypng.com/">TinyPng</a>或者图形化工具<a href="https://imageoptim.com/mac">ImageOptim</a>进行图片压缩。这两种工具的压缩率没有WebP高，不会改变图片压缩方式，相应的解析式对性能损耗也不会增加</strong></p>

<h2 id="toc_7">代码瘦身</h2>

<p>App的安装包之中主要就是资源文件和可执行文件，而我们在掌握了对图片资源的优化之后，就需要学习怎么优化可执行文件了</p>

<p>可执行文件就是一个<code>Mach-O</code>文件了，大小由其代码量决定。通常，<strong>对可执行文件瘦身就是，删除无用代码的过程</strong></p>

<ul>
<li>首先，找出方法和类的全集</li>
<li>然后，找到使用过的方法和类</li>
<li>接下来，取二者的差集即为无用代码</li>
<li>最后人工确认进行删除</li>
</ul>

<h3 id="toc_8">LinkMap 结合 Mach-O找到无用代码</h3>

<h4 id="toc_9">LinkMap 来获得所有的代码类和方法的信息</h4>

<p>通过在build setting中打开<code>Write Link Map</code>然后指定其path 可以获得编译后的LinkMapp文件，其主要分为 <code>Object File</code>、<code>Section</code>、<code>Symbols</code></p>

<ul>
<li>Object File：主要包含了代码工程的所有文件</li>
<li>Section：描述代码段在生成的Mach-O里的偏移位置和大小</li>
<li>Symbols会列出每个方法、类、block、以及它们的大小</li>
</ul>

<h4 id="toc_10">通过Mach-O获取所有使用过的方法和类</h4>

<p>iOS方法都是通过<code>objc_send</code>方法调用的。而，objc_msgSend在Mach-O文件中是通过<code>__objc_selrefs</code>这个section来获取selector这个参数的</p>

<p>因此: <strong>__Objc_selrefs里是调用过的方法。_objc_classrefs里是调用过的类，_objc_superrefs里是调用过super的类。因此，通过_objc_classrefs和_objc_superrefs就可以获取所有使用过的类和子类</strong></p>

<p>想要查看Mach-O文件中的信息 我们可以通过<a href="https://sourceforge.net/projects/machoview/">MachOView这个软件</a>查看文件中的信息，其<a href="https://github.com/gdbinit/MachOView">源码地址</a></p>

<p><img src="media/15645609012102/15646435135341.jpg" alt="" style="width:690px;"/></p>

<p>因为可能存在运行时调用，所以这种方法并不完美，需要做二次确认，而且人工量太大，不适合频繁检测</p>

<h3 id="toc_11">AppCode找出无用代码</h3>

<p>AppCode当代码量过百万时，就无法做静态分析了。但是当项目工程量不大时，是可以直接用<code>AppCode</code>来做静态分析的。毕竟当代码量达到百万行级别的团队，是会自己通过Clang静态分析来开发工具，检查无用的方法和类</p>

<p>使用很简单 在AppCode中选择Code-&gt;Inspect Code就可以进行静态分析<br/>
静态分析之后，可以再Ununsed Code中看到所有的无用代码<br/>
<img src="media/15645609012102/15646441469049.jpg" alt="" style="width:538px;"/></p>

<p>其中包括了</p>

<ul>
<li>无用类：Unused class 无用类，Unused import statement 无用类引用声明， Unused property 无用的属性</li>
<li>无用方法：Unused method 无用的方法 Unused parameter 无用参数 Unused instance variable无用的实例变量 Unused local variable无用的局部变量 Unused value 无用值</li>
<li>无用宏： Unused macro 无用的宏</li>
<li>无用全局： Unused global declation 是无用的全局声明</li>
</ul>

<p>注意，AppCode检查存在的问题:</p>

<ul>
<li>JSONModel里定义了未使用的协议会被判定为无用协议</li>
<li>子类使用了父类的方法，那这个服类方法并不会任务被使用了</li>
<li>通过点方式使用的属性，该属性会被认为没有使用</li>
<li>使用performSelector方法调用的方法，是检查不出的</li>
<li>运行时声明类的情况检查不出来</li>
</ul>

<p>因此，Appcode检查的无用代码也请 人工二次确认之后才能安全删除</p>

<h3 id="toc_12">运行时检查类是否真的被使用</h3>

<p>通过ObjC的runtime源码，我们可以找到怎么判断一个类是否初始化过的函数:</p>

<pre><code class="language-objectivec">#define RW_INITIALIZED (1&lt;&lt;29)
bool isInitialized() {
   return getMeta()-&gt;data()-&gt;flags &amp; RW_INITIALIZED;
}
</code></pre>

<p><code>isInitialized</code>的结果会保存到元类的class_rw_t结构体的flags信息里，flags的1&lt;&lt;29位记录的就是这个类是否初始化的信息。而flags的其他位记录的信息</p>

<pre><code class="language-objectivec">// 类的方法列表已修复
#define RW_METHODIZED         (1&lt;&lt;30)

// 类已经初始化了
#define RW_INITIALIZED        (1&lt;&lt;29)

// 类在初始化过程中
#define RW_INITIALIZING       (1&lt;&lt;28)

// class_rw_t-&gt;ro 是 class_ro_t 的堆副本
#define RW_COPIED_RO          (1&lt;&lt;27)

// 类分配了内存，但没有注册
#define RW_CONSTRUCTING       (1&lt;&lt;26)

// 类分配了内存也注册了
#define RW_CONSTRUCTED        (1&lt;&lt;25)

// GC：class 有不安全的 finalize 方法
#define RW_FINALIZE_ON_MAIN_THREAD (1&lt;&lt;24)

// 类的 +load 被调用了
#define RW_LOADED             (1&lt;&lt;23)
</code></pre>

<p>这样就能够找出哪些类是没有初始化的，找到真实环境中没有用到的类并清理。具体实施时，可以线下测试检查所有类，测出那些类没有使用，然后上线针对没有用到的类进行多版本检测，判断合理性后二次确认，并且最终将真正没有用到的类进行删除</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AsyncDisplayKit]]></title>
    <link href="https://acefish.github.io/15645543599204.html"/>
    <updated>2019-07-31T14:25:59+08:00</updated>
    <id>https://acefish.github.io/15645543599204.html</id>
    <content type="html"><![CDATA[
<p>即刻团队的 <a href="https://medium.com/jike-engineering/asyncdisplaykit%E4%BB%8B%E7%BB%8D-%E4%B8%80-6b871d29e005">AsyncDisplayKit介绍</a></p>

<p><a href="https://texturegroup.org/docs/getting-started.html">AsyncDisplayKit-TextTrue</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[离屏渲染]]></title>
    <link href="https://acefish.github.io/15644708593081.html"/>
    <updated>2019-07-30T15:14:19+08:00</updated>
    <id>https://acefish.github.io/15644708593081.html</id>
    <content type="html"><![CDATA[
<p>学习自即刻团队的<a href="https://zhuanlan.zhihu.com/p/72653360">离屏渲染</a></p>

<h2 id="toc_0">iOS渲染架构</h2>

<p>在WWDC的Advanced Graphics and Animations for iOS Apps（WWDC14 419，关于UIKit和Core Animation基础的session在早年的WWDC中比较多）中有这样一张图：</p>

<p><img src="media/15644708593081/15644710697530.jpg" alt=""/></p>

<p>可以看到是CPU和GPU协作完成了渲染操作。CPU主要在Application这一层操作，之后在RenderServer线程，CoreAnimation会将具体操作转换成发送GPU的draw calls（以前是call OpenGL 现在有部分转为Metal）,进行渲染</p>

<h2 id="toc_1">离屏渲染</h2>

<p>当需要在屏幕上显示内容时，至少需要一块与屏幕像素数据量一样大的<code>frame buffer</code>，作为像素数据存储区域，而这也是GPU存储渲染结果的地方。如果有时因为面临限制，无法把渲染结果直接写入frame buffer，而是先暂存在另外的内存区域，之后在写入<code>frame buffer</code>，这个过程就被称为<strong>离屏渲染</strong></p>

<h3 id="toc_2">CPU&quot;离屏渲染&quot;？</h3>

<p>在UIView中自己执行的drawRect方法，cpu会申请一块内存区域等待有可能到来的绘画操作。<br/>
在CPU中进行的光栅化操作（如文字渲染、图片解码）等<br/>
都无法直接绘制到GPU掌管的frame buffer，只能暂存在另外一块内存中<br/>
这些发生在CPU中这些“离屏渲染”并不是真正意义上的，而是属于&quot;软件渲染&quot;范畴的</p>

<h3 id="toc_3">GPU离屏渲染</h3>

<p>我们知道，渲染主要由CoreAnimation的Render Server模块，通过调用显卡驱动提供的OpenGL/Metal接口执行。在执行渲染时，<code>Render Server</code>遵循画家算法，layer按照次序输出至frameBuffer，覆盖即刻得到最终的显示结果，然后交由GPU进行渲染显示到屏幕上</p>

<p>但是有部分场景是无法这样实现的，因为GPU虽然可以按照画家算法进行输出，但是无法再某曾渲染完成后，再回头擦除或者改变其中的某部分。这就意味着，对于layer如果不能单词遍历就完成渲染，那就只能另开一块内存，借助这个临时中转区域来完成多次的修改/剪裁操作(这就是离屏渲染了)。</p>

<h3 id="toc_4">常见离屏渲染场景</h3>

<ol>
<li><strong>corenerRadus+clipsToBounds</strong>
因为此时子layer也会被裁减，但是在没有统一组合后也是无法获得统一裁剪后的图像，因此需要开辟另外一块内存，在渲染和切角完成后，输出到frame buffer中<br/>
注意如果没有clipsToBounds，也不会触发离屏渲染了</li>
<li><strong>shadow</strong>
原因其实与圆角差不多，在没有将画布上所有内容组合完成之前也是无法知道阴影形状的，因此需要额外的内存空间。<br/>
当然，如果我们能在整个画布都没有渲染完成之前就知道阴影部分的形状（设置阴影的shadowPath），也可以绘制阴影而不触发离屏渲染</li>
<li><p><strong>group opacity</strong><br/>
此时的alpha并不是加到某一层，而是整个layer树，因此只能等渲染完成再加上alpha，最后和底下的其它layer相折叠，得到实际的颜色。因此这也是需要另外开辟存储空间的</p></li>
<li><p><strong>mask</strong></p>
<p>mask由layer和其上的子layer组合，而且可能有透明度，因此是会触发离屏渲染的</p></li>
<li><p><strong>UIBlurEffect</strong><br/>
<img src="media/15644708593081/15645419693084.jpg" alt="" style="width:500px;"/></p></li>
</ol>

<h3 id="toc_5">离屏渲染解决方案</h3>

<p>因为离屏渲染开销很大，特别是在滚动视图中，每帧都会触发cell的重绘，因此在无法避免时，就尽量降低性能影响，通过<code>CALayer</code>提供的<code>shouldRasterize</code>设置其为true后，<code>Render Server</code>会强制吧layer的渲染结果(包括其子layer，以及圆角、阴影、group opacity等等)保存在一块内存中，这样接下来就可以被复用，而不会再次离屏渲染了</p>

<p>注意:</p>

<ul>
<li><code>shouldRasterize</code>主旨在于降低性能损失，但是至少会触发一次离屏渲染，如果layer本不复杂，也没有圆角 阴影等，打开这个只会没必要的多一次离屏渲染</li>
<li>一旦缓存超过100ms没有被使用，会被自动废弃</li>
<li>layer的内容必须是静态的，因为一旦发生变化缓存就失效了，就有需要重新离屏渲染，然后缓存，这就需要我们极力避免的情况</li>
</ul>

<h3 id="toc_6">CPU渲染的使用</h3>

<p>因为GPU对图形处理的更高性能，以及其更好的并行计算能里，我们倾向于让GPU完成渲染任务，而CPU有更多时间来处理复杂的app的复杂逻辑。</p>

<p>但是针对一些特殊情况，比如文字渲染(CoreText),图片渲染(ImageIO),因为此时GPU并不擅长此类工作，因为需要先由CPU处理好之后，将结果作为<a href="https://texturegroup.org/docs/automatic-layout-examples-2.html">texture</a>传给GPU.</p>

<p>比如，我们可以使用<code>CoreGraphic</code>来给图形设置圆角(将圆角以外的部分设置为透明)，这样的话就全部由CPU完成，不再需要使用<code>corerRadius</code>。而且这样的话，我们也可以做到灵活控制裁剪和缓存的时机，避开CPU和GPU繁忙，平衡性能波动</p>

<p>注意：</p>

<ol>
<li>渲染不是CPU强项，调用CoreGraphics会消耗其相当一部分时间，因此通常将CPU渲染放在后台完成(AsyncDisplayKit的实现思想)。然后再回到主线程，将渲染结果传给CoreAnimation</li>
<li>CPU渲染性能不够 只能渲染静态的元素，如文字、图片等</li>
<li>渲染结果的bitmap数据量较大，占用较大内存，应该在使用完成后，及时释放，否则容易OOM</li>
<li>使用CPU渲染就不要再触发离屏渲染了</li>
<li>多使用Instuments工具测试性能</li>
</ol>

<h2 id="toc_7">即刻团队对即刻APP的优化</h2>

<ol>
<li>即刻大量应用AsyncDisplayKit(Texture)作为主要渲染框架，对于文字和图片的异步渲染操作交由框架来处理。</li>
<li>对于图片的圆角，统一采用“precomposite”的策略，也就是不经由容器来做剪切，而是预先使用CoreGraphics为图片裁剪圆角</li>
<li>对于视频的圆角，由于实时剪切非常消耗性能，我们会创建四个白色弧形的layer盖住四个角，从视觉上制造圆角的效果</li>
<li>对于view的圆形边框，如果没有backgroundColor，可以放心使用cornerRadius来做</li>
<li>对于所有的阴影，使用shadowPath来规避离屏渲染</li>
<li>对于特殊形状的view，使用layer mask并打开shouldRasterize来对渲染结果进行缓存</li>
<li>对于模糊效果，不采用系统提供的UIVisualEffect，而是另外实现模糊效果（CIGaussianBlur），并手动管理渲染结果</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[渲染]]></title>
    <link href="https://acefish.github.io/15643878437057.html"/>
    <updated>2019-07-29T16:10:43+08:00</updated>
    <id>https://acefish.github.io/15643878437057.html</id>
    <content type="html"><![CDATA[
<p>学习自 <a href="https://time.geekbang.org/column/article/101639">iOS开发高手课</a></p>

<h2 id="toc_0">渲染原理</h2>

<p>App界面是由CPU和GPU共同计算处理</p>

<p>CPU内部流水线结构拥有并行计算能力，一般用于显示内容的计算。而GPU的并行计算能力更强，能够通过计算将图形结果显示到屏幕像素中。<strong>渲染就是将内存中的图形数据经过转换显示到屏幕上的过程。而负责执行这个过程的就是GPU</strong></p>

<p>在渲染的过程中，GPU是需要处理屏幕上的每个像素点，并保证这些像素点的更新时流畅的</p>

<p>GPU的主要工作就是将3D坐标转换为2D坐标，再把2D坐标转为实际像素，实现的过程分为: <strong>顶点着色器（确定形状的点）、形状装配（确定形状的线）、几何着色器（确定三角形个数）、光栅化（确定屏幕像素点）、片段着色器（对像素点着色）、测试与混合（检查深度和透明度）六个阶段</strong></p>

<p>而我们<code>OpenGL</code>的标准库提供了编程能力，为了更方便的操作控制GPU</p>

<p>在渲染的过程中，<code>CPU</code>主要用来处理渲染内容的计算，比如<em>视图创建、布局、图片解码</em>等，内容计算完成后，再传给GPU进行渲染。CPU和GPU的相互配合，充分利用手机硬件来提升用户使用app的体验。而我们见到的界面卡顿等，就是以内CPU的计算时间超过屏幕刷新率的时间</p>

<blockquote>
<p>在对比原生、大前端和Flutter谁更流畅，不就是对比在渲染过程中CPU计算内容谁会更快，谁就会更流畅了</p>
</blockquote>

<h2 id="toc_1">原生渲染流程</h2>

<p>原生的界面渲染，主要分为一下四步:</p>

<ol>
<li>更新视图树，同步视图树</li>
<li>CPU计算要显示的内容，包括视图创建（设置Layer属性）、布局计算、视图绘制（创建Lay的Backing Image）、图像解码转换等。当runLoop在<code>BeforeWaiting</code>和<code>Exit</code>时，通知注册的监听，然后对图层打包，打包完成后，将打包数据发送给一个独立负责渲染的进程<code>Render Server</code></li>
<li>数据在到达renderServer后会被反序列化，得到图层树，按照图层树的图层顺序、RGBA值,图层frame过滤图层中被遮挡的部分，过滤后将图层树转换为渲染树，渲染树的信息会转换为OpenGL ES/Metal。前面CPU所处理的这些事情统称为<code>Commit Transaction</code></li>
<li><code>Render Server</code>会调用GPU,GPU开始进行前面提到的顶点着色器，形状装配、几何着色、光栅化、片段着色、测试与混合六个阶段。完成这6个阶段后，再将CPU和GPU计算后的数据显示在屏幕的每个像素点上。</li>
</ol>

<p><img src="media/15643878437057/15644670559791.jpg" alt="" style="width:648px;"/></p>

<p>补充:</p>

<blockquote>
<p>渲染过程中的<code>Commit Trasaction</code>的布局计算会重载视图的<code>LayoutSubViews</code>方法，以及执行<code>addSubviews</code>方法来添加视图。视图绘制会重载视图的<code>drawReact</code>方法。这个方法都是iOS开发中常用的</p>

<p>我们执行的移动视图、删除视图、隐藏、显示视图、调用setNeedsDispaly或者setNeedsDispalyInRect方法 都会触发界面更新，执行渲染流程</p>
</blockquote>

<h2 id="toc_2">大前端渲染</h2>

<p>大前端的开发框架主要有两类：基于webView的和类似React Native的</p>

<p>第一类的WebView的大前端渲染，主要在webKit中完成。webKit的渲染层来自以前MacOS的LayerRendering架构，而iOS也基于这一套架构。所以本质上来看WebKit和iOS的原生渲染差别不大</p>

<p>ReactNative渲染直接走的原生渲染</p>

<p>至于我们觉得大前端渲染比原生慢的原因主要是：</p>

<ol>
<li><p>从第一次内容加载来看，即使本地加载，<strong>大前端也比原生多出脚本代码解析工作</strong>。webView需要额外解析<code>HTML+CSS+Javascript</code>代码，而类React Native方案则需要解析<code>Json+Javascript</code>。 当然<code>HTML+CSS</code>的复杂度要高于<code>JSON</code>,因此解析起来会更加慢一点。即，首次加载时，WebView会比类ReactNative慢</p></li>
<li><p>从语言的本身解释执行性能来看，<strong>大前端加载后的界面更新会通过Javascript解释执行</strong>，而Javascript解释执行性能要比原生差，特别是解释执行复杂逻辑或大量计算时。所以大前端的运算速度，要比原生慢上不少</p></li>
<li><p>除了首次加载解析耗时外，js语言本身解释慢导致的性能问题这两点之外，WebView的渲染进程是单独的，每帧的更新都要通过IPC调用GPU进程。而频繁的IPC进程通信也会有性能损耗</p></li>
<li><p>webView的单独渲染进程还无法访问GPU的context，这样两个进程就么法共享纹理资源。纹理资源无法直接使用GPU的Context光栅化，那就只能通过IPC传给GPU进程，这也导致可GPU无法发挥自身的性能优势。由于WebView的光栅化无法及时同步到GPU，滑动时就容易出现白屏，就很难避免了。</p></li>
</ol>

<p>相对于原生渲染来说，webView或者类ReactNative都因为脚本语言本身的西恩那个问题而存在性能差距。</p>

<h2 id="toc_3">Flutter渲染</h2>

<p>Flutter界面是由<code>Widget</code>组成，所有的Widget组成<code>Widget Tree</code>，界面更新时会更新<code>Widget Tree</code>，然后再更新<code>Element Tree</code>，最后更新<code>RenderObject Tree</code></p>

<p>接下来的渲染流程，Flutter渲染在FrameWork层会有Build、Widget Tree、Element Tree、RenderObject Tree、Layout、Paint、Composited Layed等几个阶段。将Layer进行组合，生成纹理，使用OpenGL接口像GPU提交渲染内容进行光栅化与合成，是在Flutter的C++层，使用的时<code>Skia</code>库。包括提交到GPU进程后，合成计算，显示屏幕的过程和iOS原生基本是类似的，因此性能相差不多</p>

<p>Flutter的主要优势是在于，它可以同时运行于Android和iOS两个平台。但是苹果公司在WWDC 2019上退出SwiftUI和Preview后，Flutter界面编写和Hot Reload的有事会逐渐降低</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RACDelegateProxy]]></title>
    <link href="https://acefish.github.io/15611008346251.html"/>
    <updated>2019-06-21T15:07:14+08:00</updated>
    <id>https://acefish.github.io/15611008346251.html</id>
    <content type="html"><![CDATA[
<p>将代理用<code>RACDelegateProxy</code>实现</p>

<pre><code class="language-objectivec">RACDelegateProxy *proxy = [[RACDelegateProxy alloc] initWithProtocol:@protocol(UITableViewDelegate)];
objc_setAssociatedObject(self, _cmd, proxy, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
proxy.rac_proxiedDelegate = self;
[[proxy rac_signalForSelector:@selector(tableView:didSelectRowAtIndexPath:)]
 subscribeNext:^(RACTuple *value) {
     [value.first deselectRowAtIndexPath:value.second animated:YES];
 }];
self.tableView.delegate = (id&lt;UITableViewDelegate&gt;)proxy;

//等效于
- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RACChannel]]></title>
    <link href="https://acefish.github.io/15609354619260.html"/>
    <updated>2019-06-19T17:11:01+08:00</updated>
    <id>https://acefish.github.io/15609354619260.html</id>
    <content type="html"><![CDATA[
<p><code>RACChannel</code>是一对一的双向的数据流</p>

<h2 id="toc_0">RACChannel</h2>

<p>在channel中向外暴露的有两个属性<code>terminal</code></p>

<pre><code class="language-objectivec">@property (nonatomic, strong, readonly) RACChannelTerminal&lt;ValueType&gt; *leadingTerminal;
@property (nonatomic, strong, readonly) RACChannelTerminal&lt;ValueType&gt; *followingTerminal;
</code></pre>

<p>初始化<code>terminal</code>方法 </p>

<pre><code class="language-objectivec">- (instancetype)init {
    self = [super init];

    RACReplaySubject *leadingSubject = [RACReplaySubject replaySubjectWithCapacity:0];
    RACReplaySubject *followingSubject = [RACReplaySubject replaySubjectWithCapacity:1];
    
    [[leadingSubject ignoreValues] subscribe:followingSubject];
    [[followingSubject ignoreValues] subscribe:leadingSubject];

    _leadingTerminal = [[RACChannelTerminal alloc] initWithValues:leadingSubject otherTerminal:followingSubject];
    _followingTerminal = [[RACChannelTerminal alloc] initWithValues:followingSubject otherTerminal:leadingSubject]
    return self;
}
</code></pre>

<ol>
<li>可以看到<code>leadingSubject</code>是由<code>Capacity:0</code>的<code>RACReplaySubject</code> 而 <code>followingSubject</code>是由<code>Capacity:1</code>的<code>RACReplaySubject</code></li>
<li><code>ignoreValues</code>通过订阅相互信号的错误信息，当一端出现错误信息能保证相互发送，防止当一方出错时 另外一方还在工作</li>
<li><code>followingSubject</code>的<code>Capacity</code>为1，有初始值，因此当订阅followingTerminal信息时 可以直接进行初始化状态</li>
</ol>

<h2 id="toc_1">RACChannelTerminal: RACSignal&lt; RACSubscriber&gt;</h2>

<h3 id="toc_2">初始化</h3>

<p><code>ChannelTerminal</code>初始化,使用一个用于subcribe的<code>RACSignal</code>的value 和一个用于发送值的<code>id&lt;RACSubscriber&gt;</code>的otherTerminal</p>

<p>期指那个<code>value</code>表示当前端点，<code>otherTerminal</code>表示远程端点</p>

<pre><code class="language-objectivec">@property (nonatomic, strong, readonly) RACSignal&lt;ValueType&gt; *values;
@property (nonatomic, strong, readonly) id&lt;RACSubscriber&gt; otherTerminal;

- (instancetype)initWithValues:(RACSignal *)values otherTerminal:(id&lt;RACSubscriber&gt;)otherTerminal {
    self = [super init];
    _values = values;
    _otherTerminal = otherTerminal;
    return self;
}
</code></pre>

<h3 id="toc_3">订阅信号</h3>

<p>订阅信号 其实订阅和接收的是<code>self.values</code>的信号，即订阅的时当前信号消息</p>

<pre><code class="language-objectivec">- (RACDisposable *)subscribe:(id&lt;RACSubscriber&gt;)subscriber {
    return [self.values subscribe:subscriber];
}
</code></pre>

<h3 id="toc_4">发送</h3>

<p>如果向<code>Terminal</code>发送消息  会被转发到远程端点上，因此当前端点的订阅者并不能接收到当前端点发送的消息</p>

<pre><code class="language-objectivec">- (void)sendNext:(id)value {
    [self.otherTerminal sendNext:value];
}
</code></pre>

<h3 id="toc_5">使用</h3>

<p>我们不应该直接初始化<code>RACChannelTerminal</code>实例，而可以通过 初始化RACChannle的方式生成</p>

<h2 id="toc_6">RACChannel的使用</h2>

<h3 id="toc_7">RACChannel+UIControl</h3>

<pre><code class="language-objectivec">UIControl rac_channelForControlEvents:(UIControlEvents)controlEvents key:(NSString *)key nilValue:(nullable id)nilValue {
    RACChannel *channel = [[RACChannel alloc] init];
    
    RACSignal *eventSignal = [[[self
        rac_signalForControlEvents:controlEvents]
        mapReplace:key]
        takeUntil:[[channel.followingTerminal
            ignoreValues]
            catchTo:RACSignal.empty]];
            
            [[self
        rac_liftSelector:@selector(valueForKey:) withSignals:eventSignal, nil]
        subscribe:channel.followingTerminal];
        
        RACSignal *valuesSignal = [channel.followingTerminal
        map:^(id value) {
            return value ?: nilValue;
        }];
    [self rac_liftSelector:@selector(setValue:forKey:) withSignals:valuesSignal, [RACSignal return:key], nil];

    return channel.leadingTerminal;
}

</code></pre>

<ol>
<li><code>eventSignal</code> 获取事件触发的<code>signal</code> 并将error转换为empty信号，发送的值即为key</li>
<li><code>rac_liftSelector:with:</code> 执行一个<code>selector</code>方法,<code>rac_liftSelector:@selector(valueForKey:)</code>即为获取<code>UIControl</code>的事件的<code>key</code>的值</li>
<li><code>subscribe:channel.followingTerminal</code> 即为 channel的<code>followingTerminal</code>订阅， 综合起来就是 每次事件触发时 获取<code>key</code>的value值 然后发送<code>followingTerminal</code>  而followTerminal的<code>sendNext</code>，触发leadingSubject的<code>sendNext</code>，即将事件触发时获取到的value值发送给leadingSubject的订阅者 即 leadingTerminal的订阅者</li>
<li><p><code>valueSignal</code> 订阅<code>followingTerminal</code>即 订阅 followSubject的消息，即为收到leadingTerminal发送的消息</p></li>
<li><p><code>[self rac_liftSelector:@selector(setValue:forKey:) withSignals:valuesSignal, [RACSignal return:key], nil];</code>  收到<code>leadingTerminal</code>发送的消息后将收到的值传给当前的控件，保证数据同步</p></li>
</ol>

<p>综合起来来说，就是在<code>controlEvent</code>事件发生时，将key的value值发送给<code>followingTerminal</code>，并在接收来自<code>leadingTerminal</code>消息后，更新控件的key属性对应的value值</p>

<h4 id="toc_8">UITextField+TextChannel</h4>

<pre><code class="language-objectivec">- (RACChannelTerminal *)rac_newTextChannel {
    return [self rac_channelForControlEvents:UIControlEventAllEditingEvents key:@keypath(self.text) nilValue:@&quot;&quot;];
}
</code></pre>

<h3 id="toc_9">RACChannel+KVO</h3>

<p>RACChannel提供了<code>RACKVOChannel</code>来实现对象的某个属性值进行观测， 常可以用来进行与UIKit组件或者其他对象属性进行高效的双向绑定</p>

<h4 id="toc_10">RACKVOChannel :RACChannel</h4>

<p>在KVO的channel中 我们常通过<code>RACChannelTo</code>宏定义来直接使用，观测某对象属性</p>

<pre><code class="language-objectivec">//参数分别为 对象、属性和默认值
#define RACChannelTo_(TARGET, KEYPATH, NILVALUE)

    [[RACKVOChannel alloc] initWithTarget:(TARGET) 
    keyPath:@keypath(TARGET, KEYPATH) nilValue:(NILVALUE)]
    [@keypath(RACKVOChannel.new, followingTerminal)]
</code></pre>

<p>例如：</p>

<pre><code class="language-objectivec">RACChannelTerminal *integerChannel = [[RACKVOChannel alloc] initWithTarget:self keyPath:@&quot;integerProperty&quot; nilValue:@42][@&quot;followingTerminal&quot;];
</code></pre>

<p>先来看<code>RACKVOChannel</code>的初始化方法</p>

<pre><code class="language-objectivec">- (instancetype)initWithTarget:(__weak NSObject *)target keyPath:(NSString *)keyPath nilValue:(id)nilValue {

    //KVO对象属性值并发送
    [strongTarget rac_observeKeyPath:keyPath options:NSKeyValueObservingOptionInitial observer:nil block:^(id value, NSDictionary *change, BOOL causedByDealloc, BOOL affectedOnlyLastComponent) {
        [self.leadingTerminal sendNext:value];
    }]
    
    // 收到订阅值 并设置对象的属性值
    [[self.leadingTerminal
        finally:^{
            [observationDisposable dispose];
        }]
        subscribeNext:^(id x) {
            NSObject *object = (keyPathComponentsCount &gt; 1 ? [self.target valueForKeyPath:keyPathByDeletingLastKeyPathComponent] : self.target);
            if (object == nil) return;
            [object setValue:x ?: nilValue forKey:lastKeyPathComponent];
        } error:^(NSError *error) {
        }];
    
}
</code></pre>

<p>使用RACKVOChannel的初始化方法即获得了一个Channel对象，对此对象执行 <code>[@keypath(RACKVOChannel.new, followingTerminal)]</code>来获取terminal对象是因为重写了以下两个方法:</p>

<pre><code class="language-objectivec">- (RACChannelTerminal *)objectForKeyedSubscript:(NSString *)key {
    RACChannelTerminal *terminal = [self valueForKey:key];
    return terminal;
}

- (void)setObject:(RACChannelTerminal *)otherTerminal forKeyedSubscript:(NSString *)key {
    RACChannelTerminal *selfTerminal = [self objectForKeyedSubscript:key];
    [otherTerminal subscribe:selfTerminal];
    [[selfTerminal skip:1] subscribe:otherTerminal];
}
</code></pre>

<p>重写这两个方法 就会使在调用<code>setObject: forKeyedSubscript:</code>时执行<code>-subscribe:</code>方法完成双向绑定</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RACMulticastConnection: NSObject]]></title>
    <link href="https://acefish.github.io/15609234167437.html"/>
    <updated>2019-06-19T13:50:16+08:00</updated>
    <id>https://acefish.github.io/15609234167437.html</id>
    <content type="html"><![CDATA[
<p><code>RACMulticastConnection</code>用于信号的一对多传播</p>

<pre><code class="language-objectivec">@property (nonatomic, strong, readonly) RACSignal&lt;ValueType&gt; *signal;
{
RACSubject *_signal;
}
@property (nonatomic, readonly, strong) RACSignal *sourceSignal;

</code></pre>

<p>这个signal属性即为对外开发的信号，其实现是使用RACSubject对象，而<code>sourceSignal</code>即为订阅的原信号</p>

<p>在初始化方法中初始化这两个对象:</p>

<pre><code class="language-objectivec">- (instancetype)initWithSourceSignal:(RACSignal *)source subject:(RACSubject *)subject { 
    _sourceSignal = source;
    _signal = subject;
}
</code></pre>

<h2 id="toc_0">使用</h2>

<p>我们不应该直接初始化<code>RACMulticastConnection</code>对象  使用<code>RACSignal</code>的实例化方法初始化这个实例对象:</p>

<pre><code class="language-objectivec">- (RACMulticastConnection *)publish {
    RACSubject *subject = [RACSubject subject];
    RACMulticastConnection *connection = [self multicast:subject];
    return connection;
}

- (RACMulticastConnection *)multicast:(RACSubject *)subject {
    RACMulticastConnection *connection = [[RACMulticastConnection alloc] initWithSourceSignal:self subject:subject];
    return connection;
}
</code></pre>

<p>可以很简单的看出来这两个方法只是简单的声明了<code>RACSubject</code>对象，并初始化一个<code>RACMulticastConnection</code>对象并返回</p>

<h2 id="toc_1">connect &amp;&amp; autoconnect</h2>

<p>具体信号的订阅是在connect方法中，只有执行了connect方法 才会订阅该信号 才能接收信号</p>

<pre><code class="language-objectivec">- (RACDisposable *)connect {
    self.serialDisposable.disposable = [self.sourceSignal subscribe:_signal];
}
</code></pre>

<p><code>autoconnect</code>方法返回一个信号  当订阅了该信号时就会执行connect方法 订阅<code>sourceSignal</code>从而收到信号值</p>

<pre><code class="language-objectivec">- (RACSignal *)autoconnect {

    return [RACSignal
        createSignal:^(id&lt;RACSubscriber&gt; subscriber) {
            RACDisposable *subscriptionDisposable = [self.signal subscribe:subscriber];
            [self connect];
            }];
        }]
}
</code></pre>

<h2 id="toc_2">补充</h2>

<p>当使用<code>publish</code>方法返回的<code>RACMulticastConnection</code>对象时，只有当<code>connect</code>之前订阅的才能收到消息，而在connect之后订阅的对象并不能收到消息</p>

<p>因此此时我们可以使用<code>RACReplaySubject</code>对象，可以通过<code>[RACSignal replay]</code>方法实现</p>

<pre><code class="language-objectivec">- (RACSignal *)replay {
    RACReplaySubject *subject = [RACReplaySubject subject];
    RACMulticastConnection *connection = [self multicast:subject];
    [connection connect];
    return connection.signal;
}
</code></pre>

<p>除此之外 还有</p>

<p>Capacity:1 的ReplaySubject</p>

<pre><code class="language-objectivec">- (RACSignal *)replayLast {
    RACReplaySubject *subject = [RACReplaySubject replaySubjectWithCapacity:1];
    RACMulticastConnection *connection = [self multicast:subject];
    [connection connect];
    return connection.signal;
}
</code></pre>

<p>只有在返回的信号在被第一次订阅时 才会执行connect方法</p>

<pre><code class="language-objectivec">- (RACSignal *)replayLazily {
    RACMulticastConnection *connection = [self multicast:[RACReplaySubject subject]];
    return [RACSignal
        defer:^{
            [connection connect];
            return connection.signal;
        }];
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RACCommand: NSObject]]></title>
    <link href="https://acefish.github.io/15608261485816.html"/>
    <updated>2019-06-18T10:49:08+08:00</updated>
    <id>https://acefish.github.io/15608261485816.html</id>
    <content type="html"><![CDATA[
<p><code>RACCommand</code> 继承自<code>NSObject</code> 用于管理<code>RACSignal</code>信号</p>

<h2 id="toc_0">RACCommand使用示例</h2>

<pre><code class="language-objectivec">RACCommand *command = [[RACCommand alloc] initWithSignalBlock:^RACSignal * _Nonnull(id  _Nullable input) {
        return [RACSignal createSignal:^RACDisposable * _Nullable(id&lt;RACSubscriber&gt;  _Nonnull subscriber) {
            NSInteger integer = [input integerValue];
            for (NSInteger i = 0; i &lt; integer; i++) {
                [subscriber sendNext:@(i)];
            }
            [subscriber sendCompleted];
            return [RACDisposable disposableWithBlock:^{
                NSLog(@&quot;信号销毁了&quot;);
            }];
        }];
    }];
    
    [[command.executionSignals switchToLatest] subscribeNext:^(id  _Nullable x) {
        NSLog(@&quot;收到消息---%@&quot;,x);
    } error:^(NSError * _Nullable error) {
        NSLog(@&quot;error了&quot;);
    } completed:^{
        NSLog(@&quot;completed了&quot;);
    }];
    
    [command execute:@1];
    [RACScheduler.mainThreadScheduler afterDelay:0.1
                                        schedule:^{
                                            [command execute:@2];
                                        }];
    [RACScheduler.mainThreadScheduler afterDelay:0.2
                                        schedule:^{
                                            [command execute:@3];
                                        }];
                                        
                            
    //log结果
    收到消息---0
    信号销毁了
    收到消息---0
    收到消息---1
    信号销毁了
    收到消息---0
    收到消息---1
    收到消息---2
    信号销毁了
    completed了
</code></pre>

<ol>
<li>通过<code>switchToLatest</code>方法来获取信号中的信号</li>
<li>因为默认情况下<code>RACCommand</code>是不支持并发操作的，需要在上次命令发送完成后，再发送下次信号</li>
</ol>

<pre><code class="language-objectivec">@property (nonatomic, strong, readonly) RACSignal&lt;RACSignal&lt;ValueType&gt; *&gt; *executionSignals;
</code></pre>

<p>通过以上示例可以看出整个流程中，传入一个block，这个block通过传入值生成对应的<code>signal</code>, 而command属性<code>executionSignals</code>即为这些信号的信号</p>

<p>通过 <code>execute</code>方法 出入值 </p>

<h2 id="toc_1">RACCommand</h2>

<p>在<code>Command</code>内部 是由几个很重要的信号组成的</p>

<h3 id="toc_2">初始化</h3>

<p>初始化方法需要传入<code>signalBlock</code>， 该block通过input传入值 生成一个<code>RACSignal</code><br/>
 在初始化方法中初始化了重要的信号</p>

<pre><code class="language-objectivec"> RACCommand initWithEnabled:(RACSignal *)enabledSignal signalBlock:(RACSignal&lt;id&gt; * (^)(id input))signalBlock {
    _addedExecutionSignalsSubject = [RACSubject new];
    _allowsConcurrentExecutionSubject = [RACSubject new];
    _signalBlock = [signalBlock copy];
    _executionSignals =...
    _errors = ...
    _executing = ...
    _immediateEnabled = ...
    _enabled = ...
 }
</code></pre>

<h3 id="toc_3">addedExecutionSignalsSubject</h3>

<p><code>addedExecutionSignalsSubject</code>即为包含信号的信号 当传入值时通过signalblock生成的signal即包含在改信号中</p>

<p><code>addedExecutionSignalsSubject</code>信号在<code>execute:</code>执行时，对信号进行订阅和发送</p>

<pre><code class="language-objectivec">- (RACSignal *)execute:(id)input { 
    BOOL enabled = [[self.immediateEnabled first] boolValue];
    if (!enabled) {
        return [RACSignal error:error];
    }
    RACSignal *signal = self.signalBlock(input);
    //订阅信号
    RACMulticastConnection *connection = [[signal
        subscribeOn:RACScheduler.mainThreadScheduler]
        multicast:[RACReplaySubject subject]];
    //发送信号
    [self.addedExecutionSignalsSubject sendNext:connection.signal];
    [connection connect];
    return connection.signal;
}
</code></pre>

<h3 id="toc_4">immediateExecuting &amp;&amp; _executing 表示当前有操作执行的信号</h3>

<p>immediateExecuting的逻辑是：<br/>
    1. <code>catchTo</code>捕获<code>addedExecutionSignalsSubject</code>信号中的error信号，转换为empty<br/>
    2. <code>flattenMap:</code>将每个信号的开始和结束时间点转为1和-1信号（<code>start为1 then为-1</code>）<br/>
    3. <code>scanWithStart:@0 reduce:</code> 将上一步得到的1和-1进行叠加得到0 或者 非0<br/>
        1. <code>map:</code>将0/非0 转为 NO/YES 表示当前是否有信号正在处理</p>

<pre><code class="language-objectivec">RACSignal *immediateExecuting = [[[[self.addedExecutionSignalsSubject
        flattenMap:^(RACSignal *signal) {
            return [[[signal
                catchTo:[RACSignal empty]]
                then:^{
                    return [RACSignal return:@-1];
                }]
                startWith:@1];
        }]
        scanWithStart:@0 reduce:^(NSNumber *running, NSNumber *next) {
            return @(running.integerValue + next.integerValue);
        }]
        map:^(NSNumber *count) {
            return @(count.integerValue &gt; 0);
        }]
        startWith:@NO];
</code></pre>

<p>将immediateExecuting 信号进行优化  <strong>表示当前是否有任务执行</strong></p>

<pre><code class="language-objectivec">_executing = [[[[immediateExecuting
        deliverOn:RACScheduler.mainThreadScheduler]
        // This is useful before the first value arrives on the main thread.
        startWith:@NO]
        distinctUntilChanged]
        replayLast]
</code></pre>

<h3 id="toc_5">moreExecutionsAllowed  表示是否允许更多信号执行</h3>

<p>简单来看就是 当不允许并发时（默认不允许并发），<code>[immediateExecuting not]</code></p>

<pre><code class="language-objectivec">RACSignal *moreExecutionsAllowed = [RACSignal
        if:[self.allowsConcurrentExecutionSubject startWith:@NO]
        then:[RACSignal return:@YES]
        else:[immediateExecuting not]];
</code></pre>

<h3 id="toc_6">executionSignals</h3>

<pre><code class="language-objectivec"> @property (nonatomic, strong, readonly) RACSignal&lt;RACSignal&lt;ValueType&gt; *&gt; *executionSignals;
</code></pre>

<p><code>executionSignals</code>是一个包含信号的信号<br/>
executionSignals 只是简单的将<code>self.addedExecutionSignalsSubject</code>信号中的所有错误信号<code>NSError</code>转换为了<code>empty</code>信号</p>

<pre><code class="language-objectivec">_executionSignals = [[self.addedExecutionSignalsSubject
        map:^(RACSignal *signal) {
            return [signal catchTo:[RACSignal empty]];
        }]
        deliverOn:RACScheduler.mainThreadScheduler]
</code></pre>

<h3 id="toc_7">_enabled 信号 表示当前命令是否可以被再次执行</h3>

<pre><code class="language-objectivec">RACSignal *enabledSignal = [RACSignal return:@YES];

_immediateEnabled = [[[[RACSignal
    combineLatest:@[ enabledSignal, moreExecutionsAllowed ]]
    and]
    takeUntil:self.rac_willDeallocSignal]
    replayLast];
    
//保证信号中的第一个值在订阅线程，而其他值在主线程派发
_enabled = [[[[self.immediateEnabled
    take:1]
    concat:[[self.immediateEnabled skip:1] deliverOn:RACScheduler.mainThreadScheduler]]
    distinctUntilChanged]
    replayLast]
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RACSignal信号的订阅与发送]]></title>
    <link href="https://acefish.github.io/15604257329990.html"/>
    <updated>2019-06-13T19:35:32+08:00</updated>
    <id>https://acefish.github.io/15604257329990.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">RACSignal</h2>

<h4 id="toc_1">订阅信号</h4>

<p>订阅信号动作 就是创建一个遵循<code>&lt;RACSubscriber&gt;</code>代理的对象 该对象将接受到信号时要做的动作block保存起来</p>

<pre><code class="language-objectivec">RACSignal subscribeNext:(void (^)(id x))nextBlock error:(void (^)(NSError *error))errorBlock completed:(void (^)(void))completedBlock {
    
    RACSubscriber *subscriber = [[self alloc] init];
    subscriber-&gt;_next = [next copy];
    subscriber-&gt;_error = [error copy]    
    subscriber-&gt;_completed = [completed copy];
    
    [self subscribe:subscriber];
    
}
</code></pre>

<p>具体订阅该信号要做的事情  因为不同子类的信号发送事件不同  需要被子类重写</p>

<pre><code class="language-objectivec">RACSignal subscribe:(id&lt;RACSubscriber&gt;)subscriber {
    //被子类重写
}
</code></pre>

<h3 id="toc_2">RACSubscriber<RACSubscriber></h3>

<p>遵循<code>RACSubscriber</code>代理 即可发送信号值</p>

<pre><code class="language-objectivec">- (void)sendNext:(id)value {
    self.nextBlock(value);
}
- (void)sendError:(NSError *)e{
    self.errorBlock(e);
}
- (void)sendCompleted {
    self.completedBlock();
}
</code></pre>

<p>发送信号值 即执行保存的执行事件block</p>

<h3 id="toc_3">RACDynamicSignal</h3>

<p>DynamicSignal 即在创建信号时要发送的的信号值已经设定  而在重写<code>subscribe</code>方法时只需要将其发送的值与 next、error、completed block进行匹配执行即可</p>

<h4 id="toc_4">创建信号</h4>

<p><code>DynamicSignal</code>创建信号 创建时已经包含了信号已经要发送的值<br/>
将<code>id&lt;RACSubscriber&gt;</code>信号发送者要发送的值的事件block 存起来，存到signal的<code>_didSubscribe</code>block属性中</p>

<pre><code class="language-objectivec">RACDynamicSignal createSignal:(RACDisposable * (^)(id&lt;RACSubscriber&gt; subscriber))didSubscribe {
    RACDynamicSignal *signal = [[self alloc] init];
      signal-&gt;_didSubscribe = [didSubscribe copy];
}
</code></pre>

<h4 id="toc_5">订阅信号</h4>

<p>订阅信号 即 执行创建信号时保存起来的<code>didSubscribe</code> block  send创建信号时发送的值 </p>

<pre><code class="language-objectivec">RACDynamicSignal subscribe:(id&lt;RACSubscriber&gt;)subscriber  {
    self.didSubscribe(subscriber);
}
</code></pre>

<h2 id="toc_6">RASSubject &lt; RACSubscriber &gt;: RACSignal</h2>

<p><code>Subject</code>维持一个数组保存所有需要sendEvent的<code>Subscriber</code>,当需要发送</p>

<h4 id="toc_7">订阅信号</h4>

<p>因为继承自<code>RACSignal</code> 需要重写<code>subscribe:</code>方法</p>

<pre><code class="language-objectivec">RASSubject )subscribe:(id&lt;RACSubscriber&gt;)subscriber {
    [self.subscribers addObject:subscriber];
}
</code></pre>

<h4 id="toc_8">发送信号</h4>

<p>发送信号值 即 遍历数组中的Subcriber 依次send 然后执行subscriber 中保存的nextBlock事件block</p>

<pre><code class="language-objectivec">- (void)sendNext:(id)value {
    [self enumerateSubscribersUsingBlock:^(id&lt;RACSubscriber&gt; subscriber) {
        [subscriber sendNext:value];
    }];
}
</code></pre>

<h3 id="toc_9">RACBehaviorSubject &amp;&amp; RACReplaySubject</h3>

<h4 id="toc_10">RACBehaviorSubject</h4>

<p>在内部的<code>currentValue</code>属性会保存上次发送的值 这样在订阅该信号时即能收到最后发送的信号值，进行初始化</p>

<pre><code class="language-objectivec">+ (instancetype)behaviorSubjectWithDefaultValue:(id)value {
    RACBehaviorSubject *subject = [self subject];
    subject.currentValue = value;
    return subject;
}
</code></pre>

<h5 id="toc_11">发送信号</h5>

<p>在发送信号时 保存信号作为最后发送的信号</p>

<pre><code class="language-objectivec">- (void)sendNext:(id)value {
    self.currentValue = value;
    [super sendNext:value];
}
</code></pre>

<h5 id="toc_12">订阅信号</h5>

<p>重写<code>subscribe</code>方法  在每次订阅信号时 发送当前保存的值即最后发送的信号</p>

<pre><code class="language-objectivec">RACBehaviorSubject  subscribe:(id&lt;RACSubscriber&gt;)subscriber {
    [super subscribe:subscriber];
       [subscriber sendNext:self.currentValue];
}
</code></pre>

<h4 id="toc_13">RACReplaySubject</h4>

<pre><code class="language-objectivec">@property (nonatomic, strong, readonly) NSMutableArray *valuesReceived;
</code></pre>

<p>内部有个数组保存了一定量发送过的信号 默认为<code>RACReplaySubjectUnlimitedCapacity</code>（NSUIntegerMax），即保存所有已经发送过的信号，也可以通过<code>initWithCapacity</code>初始化，制动保存多少个已经发送过的信号</p>

<pre><code class="language-objectivec">- (instancetype)initWithCapacity:(NSUInteger)capacity {
    self = [super init];
    
    _capacity = capacity;
    _valuesReceived = (capacity == RACReplaySubjectUnlimitedCapacity ? [NSMutableArray array] : [NSMutableArray arrayWithCapacity:capacity]);
    
    return self;
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RACSignal]]></title>
    <link href="https://acefish.github.io/15578383647199.html"/>
    <updated>2019-05-14T20:52:44+08:00</updated>
    <id>https://acefish.github.io/15578383647199.html</id>
    <content type="html"><![CDATA[
<p>本文学习自<a href="https://github.com/halfrost/Analyze/blob/master/contents/ReactiveObjC/RACSignal.md">『状态』驱动的世界：ReactiveCocoa</a></p>

<p><code>RACSignal</code>继承自<code>RACStream</code>，对该抽象类的方法进行了重写实现</p>

<h3 id="toc_0"><code>return</code>方法</h3>

<pre><code class="language-objectivec">+ (RACSignal *)return:(id)value {
    return [RACReturnSignal return:value];
}
/**
RACReturnSignal *signal = [[self alloc] init];
signal-&gt;_value = value;
*/
</code></pre>

<h3 id="toc_1"><code>-bind</code>方法</h3>

<pre><code class="language-objectivec">
/**
实现过程
1. 订阅原始信号值
2. 当原信号发送值时，使用bindblock对其进行转换
3. 如果bindblock返回一个信号，订阅该信号，并在收到该信号值时，将所有值传递给接收者subscriber
4. 如果bindblock请求终止就向原信号发出`-sendError:`消息
5. 当所有信号完成，向订阅者发送`-sendCompleted`
6. 无论何时 当信号发生错误，向订阅者发送-sendError: 消息
*/

- (RACSignal *)bind:(RACSignalBindBlock (^)(void))block
</code></pre>

<p><code>-bind</code>方法在原始信号每次发出消息时，执行<code>RACSignalBindBlock</code>对其进行变换生成一个新的信号</p>

<p>示例:</p>

<pre><code class="language-objectivec">//示例1：
RACSignal *signal = [RACSignal createSignal:^RACDisposable * _Nullable(id&lt;RACSubscriber&gt;  _Nonnull subscriber) {
    [subscriber sendNext:@1];
    [subscriber sendNext:@2];
    [subscriber sendNext:@3];
    [subscriber sendNext:@4];
    [subscriber sendCompleted];
    return nil;
}];
RACSignal *bindSignal = [signal bind:^RACSignalBindBlock _Nonnull{
    return ^(NSNumber *value, BOOL *stop) {
        //简单的利用bind将 原始信号的值进行了一个变换
        value = @(value.integerValue * value.integerValue);
        return [RACSignal return:value];
    };
}];
[signal subscribeNext:^(id  _Nullable x) {
    NSLog(@&quot;signal: %@&quot;, x);
}];
[bindSignal subscribeNext:^(id  _Nullable x) {
    NSLog(@&quot;bindSignal: %@&quot;, x);
}];
</code></pre>

<h3 id="toc_2">-concat方法</h3>

<pre><code class="language-objectivec">- (RACSignal *)concat:(RACSignal *)signal {
    return [[RACSignal createSignal:^(id&lt;RACSubscriber&gt; subscriber) {

        [self subscribeNext:^(id x) {
            [subscriber sendNext:x];
        } error:^(NSError *error) {
            [subscriber sendError:error];
        } completed:^{
            [signal subscribe:subscriber];
        }];
    }] setNameWithFormat:@&quot;[%@] -concat: %@&quot;, self.name, signal];
}
</code></pre>

<p>当原始信号<code>completed</code>后 subcribe contact的信号</p>

<h3 id="toc_3">-zipWith方法</h3>

<ul>
<li>(RACSignal *)zipWith:(RACSignal *)signal<br/>
将两个信号值进行zip 即每次发出一个为<code>RACTuple</code>值为[signal1value, signal2value]的值 当其中一个error或者completed即停止zipSignal</li>
</ul>

<h2 id="toc_4">信号的创建</h2>

<p>RACSignal的<code>createSignal</code>方法</p>

<pre><code class="language-objectivec">//RACSignal
+ (RACSignal *)createSignal:(RACDisposable * (^)(id&lt;RACSubscriber&gt; subscriber))didSubscribe {
    return [RACDynamicSignal createSignal:didSubscribe];
}

//RACDynamicSignal
+ (RACSignal *)createSignal:(RACDisposable * (^)(id&lt;RACSubscriber&gt; subscriber))didSubscribe {
    RACDynamicSignal *signal = [[self alloc] init];
    signal-&gt;_didSubscribe = [didSubscribe copy];
    return [signal setNameWithFormat:@&quot;+createSignal:&quot;];
}
</code></pre>

<p>signal保存了<code>didSubscribe</code>并在每次有订阅者订阅当前信号时 都会执行一遍，向订阅者发送消息</p>

<h3 id="toc_5">RACSignal类簇</h3>

<p><code>RACSignal</code>拥有不同功能的子类</p>

<ol>
<li><p><code>RACDynamicSignal</code>：用于 <code>+ createSignal:</code></p></li>
<li><p><code>RACEmptySignal</code> 用于 <code>+ empty</code></p>
<pre><code class="language-objectivec">+ (RACSignal *)empty {
    return [[[self alloc] init] setNameWithFormat:@&quot;+empty&quot;];<br/>
}<br/>
- (RACDisposable *)subscribe:(id&lt;RACSubscriber&gt;)subscriber {<br/>
    return [RACScheduler.subscriptionScheduler schedule:^{<br/>
        [subscriber sendCompleted];<br/>
    }];<br/>
}
</code></pre></li>
<li><p><code>RACReturnSignal</code>  用于 <code>+ return</code></p>
<pre><code class="language-objectivec">+ (RACSignal *)return:(id)value {
    RACReturnSignal *signal = [[self alloc] init];<br/>
      signal-&gt;_value = value;<br/>
      return signal;<br/>
}<br/>
//将value简单保存 在有其它订阅者时 向订阅者发送value<br/>
- (RACDisposable *)subscribe:(id&lt;RACSubscriber&gt;)subscriber {<br/>
        NSCParameterAssert(subscriber != nil);<br/>
        return [RACScheduler.subscriptionScheduler schedule:^{<br/>
            [subscriber sendNext:self.value];<br/>
            [subscriber sendCompleted];<br/>
        }];<br/>
}
</code></pre></li>
<li><p><code>RACErrorSignal</code>  用于 <code>+ error</code></p>
<pre><code class="language-objectivec">+ (RACSignal *)error:(NSError *)error {
    RACErrorSignal *signal = [[self alloc] init];<br/>
    signal-&gt;_error = error;<br/>
#ifdef DEBUG<br/>
    [signal setNameWithFormat:@&quot;+error: %@&quot;, error];<br/>
#else<br/>
    signal.name = @&quot;+error:&quot;;<br/>
#endif<br/>
    return signal;<br/>
}<br/>
- (RACDisposable *)subscribe:(id&lt;RACSubscriber&gt;)subscriber {<br/>
       return [RACScheduler.subscriptionScheduler schedule:^{<br/>
    [subscriber sendError:self.error];<br/>
}];<br/>
}
</code></pre></li>
</ol>

]]></content>
  </entry>
  
</feed>
